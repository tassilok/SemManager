'------------------------------------------------------------------------------
' <auto-generated>
'     Dieser Code wurde von einem Tool generiert.
'     Laufzeitversion:4.0.30319.239
'
'     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
'     der Code erneut generiert wird.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("ds_BankTransactionModule"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class ds_BankTransactionModule
    Inherits Global.System.Data.DataSet
    
    Private tablep_Token_By_GUIDType_And_GUIDAttribute As p_Token_By_GUIDType_And_GUIDAttributeDataTable
    
    Private tablep_Token_By_GUID_Token_And_GUIDAttribute As p_Token_By_GUID_Token_And_GUIDAttributeDataTable
    
    Private tablef_Sparkasse_BankTransaktionen As f_Sparkasse_BankTransaktionenDataTable
    
    Private tablep_Currency_By_Name As p_Currency_By_NameDataTable
    
    Private tablep_Konto_By_KTO_And_BLZ As p_Konto_By_KTO_And_BLZDataTable
    
    Private tablep_ImportSettings_of_Partner As p_ImportSettings_of_PartnerDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("p_Token_By_GUIDType_And_GUIDAttribute")) Is Nothing) Then
                MyBase.Tables.Add(New p_Token_By_GUIDType_And_GUIDAttributeDataTable(ds.Tables("p_Token_By_GUIDType_And_GUIDAttribute")))
            End If
            If (Not (ds.Tables("p_Token_By_GUID_Token_And_GUIDAttribute")) Is Nothing) Then
                MyBase.Tables.Add(New p_Token_By_GUID_Token_And_GUIDAttributeDataTable(ds.Tables("p_Token_By_GUID_Token_And_GUIDAttribute")))
            End If
            If (Not (ds.Tables("f_Sparkasse_BankTransaktionen")) Is Nothing) Then
                MyBase.Tables.Add(New f_Sparkasse_BankTransaktionenDataTable(ds.Tables("f_Sparkasse_BankTransaktionen")))
            End If
            If (Not (ds.Tables("p_Currency_By_Name")) Is Nothing) Then
                MyBase.Tables.Add(New p_Currency_By_NameDataTable(ds.Tables("p_Currency_By_Name")))
            End If
            If (Not (ds.Tables("p_Konto_By_KTO_And_BLZ")) Is Nothing) Then
                MyBase.Tables.Add(New p_Konto_By_KTO_And_BLZDataTable(ds.Tables("p_Konto_By_KTO_And_BLZ")))
            End If
            If (Not (ds.Tables("p_ImportSettings_of_Partner")) Is Nothing) Then
                MyBase.Tables.Add(New p_ImportSettings_of_PartnerDataTable(ds.Tables("p_ImportSettings_of_Partner")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property p_Token_By_GUIDType_And_GUIDAttribute() As p_Token_By_GUIDType_And_GUIDAttributeDataTable
        Get
            Return Me.tablep_Token_By_GUIDType_And_GUIDAttribute
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property p_Token_By_GUID_Token_And_GUIDAttribute() As p_Token_By_GUID_Token_And_GUIDAttributeDataTable
        Get
            Return Me.tablep_Token_By_GUID_Token_And_GUIDAttribute
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property f_Sparkasse_BankTransaktionen() As f_Sparkasse_BankTransaktionenDataTable
        Get
            Return Me.tablef_Sparkasse_BankTransaktionen
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property p_Currency_By_Name() As p_Currency_By_NameDataTable
        Get
            Return Me.tablep_Currency_By_Name
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property p_Konto_By_KTO_And_BLZ() As p_Konto_By_KTO_And_BLZDataTable
        Get
            Return Me.tablep_Konto_By_KTO_And_BLZ
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property p_ImportSettings_of_Partner() As p_ImportSettings_of_PartnerDataTable
        Get
            Return Me.tablep_ImportSettings_of_Partner
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As ds_BankTransactionModule = CType(MyBase.Clone,ds_BankTransactionModule)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("p_Token_By_GUIDType_And_GUIDAttribute")) Is Nothing) Then
                MyBase.Tables.Add(New p_Token_By_GUIDType_And_GUIDAttributeDataTable(ds.Tables("p_Token_By_GUIDType_And_GUIDAttribute")))
            End If
            If (Not (ds.Tables("p_Token_By_GUID_Token_And_GUIDAttribute")) Is Nothing) Then
                MyBase.Tables.Add(New p_Token_By_GUID_Token_And_GUIDAttributeDataTable(ds.Tables("p_Token_By_GUID_Token_And_GUIDAttribute")))
            End If
            If (Not (ds.Tables("f_Sparkasse_BankTransaktionen")) Is Nothing) Then
                MyBase.Tables.Add(New f_Sparkasse_BankTransaktionenDataTable(ds.Tables("f_Sparkasse_BankTransaktionen")))
            End If
            If (Not (ds.Tables("p_Currency_By_Name")) Is Nothing) Then
                MyBase.Tables.Add(New p_Currency_By_NameDataTable(ds.Tables("p_Currency_By_Name")))
            End If
            If (Not (ds.Tables("p_Konto_By_KTO_And_BLZ")) Is Nothing) Then
                MyBase.Tables.Add(New p_Konto_By_KTO_And_BLZDataTable(ds.Tables("p_Konto_By_KTO_And_BLZ")))
            End If
            If (Not (ds.Tables("p_ImportSettings_of_Partner")) Is Nothing) Then
                MyBase.Tables.Add(New p_ImportSettings_of_PartnerDataTable(ds.Tables("p_ImportSettings_of_Partner")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablep_Token_By_GUIDType_And_GUIDAttribute = CType(MyBase.Tables("p_Token_By_GUIDType_And_GUIDAttribute"),p_Token_By_GUIDType_And_GUIDAttributeDataTable)
        If (initTable = true) Then
            If (Not (Me.tablep_Token_By_GUIDType_And_GUIDAttribute) Is Nothing) Then
                Me.tablep_Token_By_GUIDType_And_GUIDAttribute.InitVars
            End If
        End If
        Me.tablep_Token_By_GUID_Token_And_GUIDAttribute = CType(MyBase.Tables("p_Token_By_GUID_Token_And_GUIDAttribute"),p_Token_By_GUID_Token_And_GUIDAttributeDataTable)
        If (initTable = true) Then
            If (Not (Me.tablep_Token_By_GUID_Token_And_GUIDAttribute) Is Nothing) Then
                Me.tablep_Token_By_GUID_Token_And_GUIDAttribute.InitVars
            End If
        End If
        Me.tablef_Sparkasse_BankTransaktionen = CType(MyBase.Tables("f_Sparkasse_BankTransaktionen"),f_Sparkasse_BankTransaktionenDataTable)
        If (initTable = true) Then
            If (Not (Me.tablef_Sparkasse_BankTransaktionen) Is Nothing) Then
                Me.tablef_Sparkasse_BankTransaktionen.InitVars
            End If
        End If
        Me.tablep_Currency_By_Name = CType(MyBase.Tables("p_Currency_By_Name"),p_Currency_By_NameDataTable)
        If (initTable = true) Then
            If (Not (Me.tablep_Currency_By_Name) Is Nothing) Then
                Me.tablep_Currency_By_Name.InitVars
            End If
        End If
        Me.tablep_Konto_By_KTO_And_BLZ = CType(MyBase.Tables("p_Konto_By_KTO_And_BLZ"),p_Konto_By_KTO_And_BLZDataTable)
        If (initTable = true) Then
            If (Not (Me.tablep_Konto_By_KTO_And_BLZ) Is Nothing) Then
                Me.tablep_Konto_By_KTO_And_BLZ.InitVars
            End If
        End If
        Me.tablep_ImportSettings_of_Partner = CType(MyBase.Tables("p_ImportSettings_of_Partner"),p_ImportSettings_of_PartnerDataTable)
        If (initTable = true) Then
            If (Not (Me.tablep_ImportSettings_of_Partner) Is Nothing) Then
                Me.tablep_ImportSettings_of_Partner.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub InitClass()
        Me.DataSetName = "ds_BankTransactionModule"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/ds_BankTransactionModule.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablep_Token_By_GUIDType_And_GUIDAttribute = New p_Token_By_GUIDType_And_GUIDAttributeDataTable()
        MyBase.Tables.Add(Me.tablep_Token_By_GUIDType_And_GUIDAttribute)
        Me.tablep_Token_By_GUID_Token_And_GUIDAttribute = New p_Token_By_GUID_Token_And_GUIDAttributeDataTable()
        MyBase.Tables.Add(Me.tablep_Token_By_GUID_Token_And_GUIDAttribute)
        Me.tablef_Sparkasse_BankTransaktionen = New f_Sparkasse_BankTransaktionenDataTable()
        MyBase.Tables.Add(Me.tablef_Sparkasse_BankTransaktionen)
        Me.tablep_Currency_By_Name = New p_Currency_By_NameDataTable()
        MyBase.Tables.Add(Me.tablep_Currency_By_Name)
        Me.tablep_Konto_By_KTO_And_BLZ = New p_Konto_By_KTO_And_BLZDataTable()
        MyBase.Tables.Add(Me.tablep_Konto_By_KTO_And_BLZ)
        Me.tablep_ImportSettings_of_Partner = New p_ImportSettings_of_PartnerDataTable()
        MyBase.Tables.Add(Me.tablep_ImportSettings_of_Partner)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializep_Token_By_GUIDType_And_GUIDAttribute() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializep_Token_By_GUID_Token_And_GUIDAttribute() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializef_Sparkasse_BankTransaktionen() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializep_Currency_By_Name() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializep_Konto_By_KTO_And_BLZ() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializep_ImportSettings_of_Partner() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As ds_BankTransactionModule = New ds_BankTransactionModule()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub p_Token_By_GUIDType_And_GUIDAttributeRowChangeEventHandler(ByVal sender As Object, ByVal e As p_Token_By_GUIDType_And_GUIDAttributeRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub p_Token_By_GUID_Token_And_GUIDAttributeRowChangeEventHandler(ByVal sender As Object, ByVal e As p_Token_By_GUID_Token_And_GUIDAttributeRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub f_Sparkasse_BankTransaktionenRowChangeEventHandler(ByVal sender As Object, ByVal e As f_Sparkasse_BankTransaktionenRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub p_Currency_By_NameRowChangeEventHandler(ByVal sender As Object, ByVal e As p_Currency_By_NameRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub p_Konto_By_KTO_And_BLZRowChangeEventHandler(ByVal sender As Object, ByVal e As p_Konto_By_KTO_And_BLZRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub p_ImportSettings_of_PartnerRowChangeEventHandler(ByVal sender As Object, ByVal e As p_ImportSettings_of_PartnerRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class p_Token_By_GUIDType_And_GUIDAttributeDataTable
        Inherits Global.System.Data.TypedTableBase(Of p_Token_By_GUIDType_And_GUIDAttributeRow)
        
        Private columnGUID_Token As Global.System.Data.DataColumn
        
        Private columnGUID_AttributeType As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "p_Token_By_GUIDType_And_GUIDAttribute"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GUID_TokenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGUID_Token
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GUID_AttributeTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGUID_AttributeType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As p_Token_By_GUIDType_And_GUIDAttributeRow
            Get
                Return CType(Me.Rows(index),p_Token_By_GUIDType_And_GUIDAttributeRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event p_Token_By_GUIDType_And_GUIDAttributeRowChanging As p_Token_By_GUIDType_And_GUIDAttributeRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event p_Token_By_GUIDType_And_GUIDAttributeRowChanged As p_Token_By_GUIDType_And_GUIDAttributeRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event p_Token_By_GUIDType_And_GUIDAttributeRowDeleting As p_Token_By_GUIDType_And_GUIDAttributeRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event p_Token_By_GUIDType_And_GUIDAttributeRowDeleted As p_Token_By_GUIDType_And_GUIDAttributeRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub Addp_Token_By_GUIDType_And_GUIDAttributeRow(ByVal row As p_Token_By_GUIDType_And_GUIDAttributeRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function Addp_Token_By_GUIDType_And_GUIDAttributeRow(ByVal GUID_Token As System.Guid, ByVal GUID_AttributeType As System.Guid) As p_Token_By_GUIDType_And_GUIDAttributeRow
            Dim rowp_Token_By_GUIDType_And_GUIDAttributeRow As p_Token_By_GUIDType_And_GUIDAttributeRow = CType(Me.NewRow,p_Token_By_GUIDType_And_GUIDAttributeRow)
            Dim columnValuesArray() As Object = New Object() {GUID_Token, GUID_AttributeType}
            rowp_Token_By_GUIDType_And_GUIDAttributeRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowp_Token_By_GUIDType_And_GUIDAttributeRow)
            Return rowp_Token_By_GUIDType_And_GUIDAttributeRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As p_Token_By_GUIDType_And_GUIDAttributeDataTable = CType(MyBase.Clone,p_Token_By_GUIDType_And_GUIDAttributeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New p_Token_By_GUIDType_And_GUIDAttributeDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnGUID_Token = MyBase.Columns("GUID_Token")
            Me.columnGUID_AttributeType = MyBase.Columns("GUID_AttributeType")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnGUID_Token = New Global.System.Data.DataColumn("GUID_Token", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGUID_Token)
            Me.columnGUID_AttributeType = New Global.System.Data.DataColumn("GUID_AttributeType", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGUID_AttributeType)
            Me.columnGUID_Token.AllowDBNull = false
            Me.columnGUID_AttributeType.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Newp_Token_By_GUIDType_And_GUIDAttributeRow() As p_Token_By_GUIDType_And_GUIDAttributeRow
            Return CType(Me.NewRow,p_Token_By_GUIDType_And_GUIDAttributeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New p_Token_By_GUIDType_And_GUIDAttributeRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(p_Token_By_GUIDType_And_GUIDAttributeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.p_Token_By_GUIDType_And_GUIDAttributeRowChangedEvent) Is Nothing) Then
                RaiseEvent p_Token_By_GUIDType_And_GUIDAttributeRowChanged(Me, New p_Token_By_GUIDType_And_GUIDAttributeRowChangeEvent(CType(e.Row,p_Token_By_GUIDType_And_GUIDAttributeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.p_Token_By_GUIDType_And_GUIDAttributeRowChangingEvent) Is Nothing) Then
                RaiseEvent p_Token_By_GUIDType_And_GUIDAttributeRowChanging(Me, New p_Token_By_GUIDType_And_GUIDAttributeRowChangeEvent(CType(e.Row,p_Token_By_GUIDType_And_GUIDAttributeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.p_Token_By_GUIDType_And_GUIDAttributeRowDeletedEvent) Is Nothing) Then
                RaiseEvent p_Token_By_GUIDType_And_GUIDAttributeRowDeleted(Me, New p_Token_By_GUIDType_And_GUIDAttributeRowChangeEvent(CType(e.Row,p_Token_By_GUIDType_And_GUIDAttributeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.p_Token_By_GUIDType_And_GUIDAttributeRowDeletingEvent) Is Nothing) Then
                RaiseEvent p_Token_By_GUIDType_And_GUIDAttributeRowDeleting(Me, New p_Token_By_GUIDType_And_GUIDAttributeRowChangeEvent(CType(e.Row,p_Token_By_GUIDType_And_GUIDAttributeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Removep_Token_By_GUIDType_And_GUIDAttributeRow(ByVal row As p_Token_By_GUIDType_And_GUIDAttributeRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As ds_BankTransactionModule = New ds_BankTransactionModule()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "p_Token_By_GUIDType_And_GUIDAttributeDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class p_Token_By_GUID_Token_And_GUIDAttributeDataTable
        Inherits Global.System.Data.TypedTableBase(Of p_Token_By_GUID_Token_And_GUIDAttributeRow)
        
        Private columnGUID_Token As Global.System.Data.DataColumn
        
        Private columnGUID_AttributeType As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "p_Token_By_GUID_Token_And_GUIDAttribute"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GUID_TokenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGUID_Token
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GUID_AttributeTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGUID_AttributeType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As p_Token_By_GUID_Token_And_GUIDAttributeRow
            Get
                Return CType(Me.Rows(index),p_Token_By_GUID_Token_And_GUIDAttributeRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event p_Token_By_GUID_Token_And_GUIDAttributeRowChanging As p_Token_By_GUID_Token_And_GUIDAttributeRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event p_Token_By_GUID_Token_And_GUIDAttributeRowChanged As p_Token_By_GUID_Token_And_GUIDAttributeRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event p_Token_By_GUID_Token_And_GUIDAttributeRowDeleting As p_Token_By_GUID_Token_And_GUIDAttributeRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event p_Token_By_GUID_Token_And_GUIDAttributeRowDeleted As p_Token_By_GUID_Token_And_GUIDAttributeRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub Addp_Token_By_GUID_Token_And_GUIDAttributeRow(ByVal row As p_Token_By_GUID_Token_And_GUIDAttributeRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function Addp_Token_By_GUID_Token_And_GUIDAttributeRow(ByVal GUID_Token As System.Guid, ByVal GUID_AttributeType As System.Guid) As p_Token_By_GUID_Token_And_GUIDAttributeRow
            Dim rowp_Token_By_GUID_Token_And_GUIDAttributeRow As p_Token_By_GUID_Token_And_GUIDAttributeRow = CType(Me.NewRow,p_Token_By_GUID_Token_And_GUIDAttributeRow)
            Dim columnValuesArray() As Object = New Object() {GUID_Token, GUID_AttributeType}
            rowp_Token_By_GUID_Token_And_GUIDAttributeRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowp_Token_By_GUID_Token_And_GUIDAttributeRow)
            Return rowp_Token_By_GUID_Token_And_GUIDAttributeRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As p_Token_By_GUID_Token_And_GUIDAttributeDataTable = CType(MyBase.Clone,p_Token_By_GUID_Token_And_GUIDAttributeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New p_Token_By_GUID_Token_And_GUIDAttributeDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnGUID_Token = MyBase.Columns("GUID_Token")
            Me.columnGUID_AttributeType = MyBase.Columns("GUID_AttributeType")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnGUID_Token = New Global.System.Data.DataColumn("GUID_Token", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGUID_Token)
            Me.columnGUID_AttributeType = New Global.System.Data.DataColumn("GUID_AttributeType", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGUID_AttributeType)
            Me.columnGUID_Token.AllowDBNull = false
            Me.columnGUID_AttributeType.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Newp_Token_By_GUID_Token_And_GUIDAttributeRow() As p_Token_By_GUID_Token_And_GUIDAttributeRow
            Return CType(Me.NewRow,p_Token_By_GUID_Token_And_GUIDAttributeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New p_Token_By_GUID_Token_And_GUIDAttributeRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(p_Token_By_GUID_Token_And_GUIDAttributeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.p_Token_By_GUID_Token_And_GUIDAttributeRowChangedEvent) Is Nothing) Then
                RaiseEvent p_Token_By_GUID_Token_And_GUIDAttributeRowChanged(Me, New p_Token_By_GUID_Token_And_GUIDAttributeRowChangeEvent(CType(e.Row,p_Token_By_GUID_Token_And_GUIDAttributeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.p_Token_By_GUID_Token_And_GUIDAttributeRowChangingEvent) Is Nothing) Then
                RaiseEvent p_Token_By_GUID_Token_And_GUIDAttributeRowChanging(Me, New p_Token_By_GUID_Token_And_GUIDAttributeRowChangeEvent(CType(e.Row,p_Token_By_GUID_Token_And_GUIDAttributeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.p_Token_By_GUID_Token_And_GUIDAttributeRowDeletedEvent) Is Nothing) Then
                RaiseEvent p_Token_By_GUID_Token_And_GUIDAttributeRowDeleted(Me, New p_Token_By_GUID_Token_And_GUIDAttributeRowChangeEvent(CType(e.Row,p_Token_By_GUID_Token_And_GUIDAttributeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.p_Token_By_GUID_Token_And_GUIDAttributeRowDeletingEvent) Is Nothing) Then
                RaiseEvent p_Token_By_GUID_Token_And_GUIDAttributeRowDeleting(Me, New p_Token_By_GUID_Token_And_GUIDAttributeRowChangeEvent(CType(e.Row,p_Token_By_GUID_Token_And_GUIDAttributeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Removep_Token_By_GUID_Token_And_GUIDAttributeRow(ByVal row As p_Token_By_GUID_Token_And_GUIDAttributeRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As ds_BankTransactionModule = New ds_BankTransactionModule()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "p_Token_By_GUID_Token_And_GUIDAttributeDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class f_Sparkasse_BankTransaktionenDataTable
        Inherits Global.System.Data.TypedTableBase(Of f_Sparkasse_BankTransaktionenRow)
        
        Private columnGUID_Token As Global.System.Data.DataColumn
        
        Private columnName_Token As Global.System.Data.DataColumn
        
        Private columnGUID_Type As Global.System.Data.DataColumn
        
        Private columnGUID_TokenAttribute_BegZahl As Global.System.Data.DataColumn
        
        Private columnBegZahl As Global.System.Data.DataColumn
        
        Private columnGUID_TokenAttribute_Buchungstext As Global.System.Data.DataColumn
        
        Private columnBuchungstext As Global.System.Data.DataColumn
        
        Private columnGUID_Token_Attribute_Info As Global.System.Data.DataColumn
        
        Private columnInfo As Global.System.Data.DataColumn
        
        Private columnGUID_TokenAttribute_Zahlungsausgang As Global.System.Data.DataColumn
        
        Private columnZahlungsausgang As Global.System.Data.DataColumn
        
        Private columnGUID_Kontonummer_Auftragskonto As Global.System.Data.DataColumn
        
        Private columnName_Kontonummer_Auftragskonto As Global.System.Data.DataColumn
        
        Private columnGUID_Type_Kontonummer_Auftragskonto As Global.System.Data.DataColumn
        
        Private columnGUID_Bankleitzahl_Auftragskonto As Global.System.Data.DataColumn
        
        Private columnName_Bankleitzahl_Auftragskonto As Global.System.Data.DataColumn
        
        Private columnGUID_Type_Bankleitzahl_Auftragskonto As Global.System.Data.DataColumn
        
        Private columnGUID_Payment As Global.System.Data.DataColumn
        
        Private columnName_Payment As Global.System.Data.DataColumn
        
        Private columnGUID_Type_Payment As Global.System.Data.DataColumn
        
        Private columnGUID_Kontonummer_Gegenkonto As Global.System.Data.DataColumn
        
        Private columnName_Kontonummer_Gegenkonto As Global.System.Data.DataColumn
        
        Private columnGUID_Type_Kontonummer_Gegenkonto As Global.System.Data.DataColumn
        
        Private columnGUID_Bankleitzahl_Gegenkonto As Global.System.Data.DataColumn
        
        Private columnName_Bankleitzahl_Gegenkonto As Global.System.Data.DataColumn
        
        Private columnGUID_Type_Bankleitzahl_Gegenkonto As Global.System.Data.DataColumn
        
        Private columnGUID_Currencies As Global.System.Data.DataColumn
        
        Private columnName_Currencies As Global.System.Data.DataColumn
        
        Private columnGUID_Type_Currencies As Global.System.Data.DataColumn
        
        Private columnGUID_Alternate_Currency_Name As Global.System.Data.DataColumn
        
        Private columnName_Alternate_Currency_Name As Global.System.Data.DataColumn
        
        Private columnGUID_Type_Alternate_Currency_Name As Global.System.Data.DataColumn
        
        Private columnGUID_Token_Left As Global.System.Data.DataColumn
        
        Private columnGUID_TokenAttribute_Valutatag As Global.System.Data.DataColumn
        
        Private columnValutatag As Global.System.Data.DataColumn
        
        Private columnGUID_TokenAttribute_Verwendungszweck As Global.System.Data.DataColumn
        
        Private columnVerwendungszweck As Global.System.Data.DataColumn
        
        Private columnGUID_TokenAttribute_Betrag As Global.System.Data.DataColumn
        
        Private columnBetrag As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "f_Sparkasse_BankTransaktionen"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GUID_TokenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGUID_Token
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Name_TokenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnName_Token
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GUID_TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGUID_Type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GUID_TokenAttribute_BegZahlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGUID_TokenAttribute_BegZahl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BegZahlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBegZahl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GUID_TokenAttribute_BuchungstextColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGUID_TokenAttribute_Buchungstext
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BuchungstextColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBuchungstext
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GUID_Token_Attribute_InfoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGUID_Token_Attribute_Info
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property InfoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInfo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GUID_TokenAttribute_ZahlungsausgangColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGUID_TokenAttribute_Zahlungsausgang
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ZahlungsausgangColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZahlungsausgang
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GUID_Kontonummer_AuftragskontoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGUID_Kontonummer_Auftragskonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Name_Kontonummer_AuftragskontoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnName_Kontonummer_Auftragskonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GUID_Type_Kontonummer_AuftragskontoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGUID_Type_Kontonummer_Auftragskonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GUID_Bankleitzahl_AuftragskontoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGUID_Bankleitzahl_Auftragskonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Name_Bankleitzahl_AuftragskontoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnName_Bankleitzahl_Auftragskonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GUID_Type_Bankleitzahl_AuftragskontoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGUID_Type_Bankleitzahl_Auftragskonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GUID_PaymentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGUID_Payment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Name_PaymentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnName_Payment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GUID_Type_PaymentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGUID_Type_Payment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GUID_Kontonummer_GegenkontoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGUID_Kontonummer_Gegenkonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Name_Kontonummer_GegenkontoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnName_Kontonummer_Gegenkonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GUID_Type_Kontonummer_GegenkontoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGUID_Type_Kontonummer_Gegenkonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GUID_Bankleitzahl_GegenkontoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGUID_Bankleitzahl_Gegenkonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Name_Bankleitzahl_GegenkontoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnName_Bankleitzahl_Gegenkonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GUID_Type_Bankleitzahl_GegenkontoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGUID_Type_Bankleitzahl_Gegenkonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GUID_CurrenciesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGUID_Currencies
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Name_CurrenciesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnName_Currencies
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GUID_Type_CurrenciesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGUID_Type_Currencies
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GUID_Alternate_Currency_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGUID_Alternate_Currency_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Name_Alternate_Currency_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnName_Alternate_Currency_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GUID_Type_Alternate_Currency_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGUID_Type_Alternate_Currency_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GUID_Token_LeftColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGUID_Token_Left
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GUID_TokenAttribute_ValutatagColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGUID_TokenAttribute_Valutatag
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ValutatagColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnValutatag
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GUID_TokenAttribute_VerwendungszweckColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGUID_TokenAttribute_Verwendungszweck
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property VerwendungszweckColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVerwendungszweck
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GUID_TokenAttribute_BetragColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGUID_TokenAttribute_Betrag
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BetragColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBetrag
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As f_Sparkasse_BankTransaktionenRow
            Get
                Return CType(Me.Rows(index),f_Sparkasse_BankTransaktionenRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event f_Sparkasse_BankTransaktionenRowChanging As f_Sparkasse_BankTransaktionenRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event f_Sparkasse_BankTransaktionenRowChanged As f_Sparkasse_BankTransaktionenRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event f_Sparkasse_BankTransaktionenRowDeleting As f_Sparkasse_BankTransaktionenRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event f_Sparkasse_BankTransaktionenRowDeleted As f_Sparkasse_BankTransaktionenRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub Addf_Sparkasse_BankTransaktionenRow(ByVal row As f_Sparkasse_BankTransaktionenRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function Addf_Sparkasse_BankTransaktionenRow( _
                    ByVal GUID_Token As System.Guid,  _
                    ByVal Name_Token As String,  _
                    ByVal GUID_Type As System.Guid,  _
                    ByVal GUID_TokenAttribute_BegZahl As System.Guid,  _
                    ByVal BegZahl As String,  _
                    ByVal GUID_TokenAttribute_Buchungstext As System.Guid,  _
                    ByVal Buchungstext As String,  _
                    ByVal GUID_Token_Attribute_Info As System.Guid,  _
                    ByVal Info As String,  _
                    ByVal GUID_TokenAttribute_Zahlungsausgang As System.Guid,  _
                    ByVal Zahlungsausgang As Boolean,  _
                    ByVal GUID_Kontonummer_Auftragskonto As System.Guid,  _
                    ByVal Name_Kontonummer_Auftragskonto As String,  _
                    ByVal GUID_Type_Kontonummer_Auftragskonto As System.Guid,  _
                    ByVal GUID_Bankleitzahl_Auftragskonto As System.Guid,  _
                    ByVal Name_Bankleitzahl_Auftragskonto As String,  _
                    ByVal GUID_Type_Bankleitzahl_Auftragskonto As System.Guid,  _
                    ByVal GUID_Payment As System.Guid,  _
                    ByVal Name_Payment As String,  _
                    ByVal GUID_Type_Payment As System.Guid,  _
                    ByVal GUID_Kontonummer_Gegenkonto As System.Guid,  _
                    ByVal Name_Kontonummer_Gegenkonto As String,  _
                    ByVal GUID_Type_Kontonummer_Gegenkonto As System.Guid,  _
                    ByVal GUID_Bankleitzahl_Gegenkonto As System.Guid,  _
                    ByVal Name_Bankleitzahl_Gegenkonto As String,  _
                    ByVal GUID_Type_Bankleitzahl_Gegenkonto As System.Guid,  _
                    ByVal GUID_Currencies As System.Guid,  _
                    ByVal Name_Currencies As String,  _
                    ByVal GUID_Type_Currencies As System.Guid,  _
                    ByVal GUID_Alternate_Currency_Name As System.Guid,  _
                    ByVal Name_Alternate_Currency_Name As String,  _
                    ByVal GUID_Type_Alternate_Currency_Name As System.Guid,  _
                    ByVal GUID_Token_Left As System.Guid,  _
                    ByVal GUID_TokenAttribute_Valutatag As System.Guid,  _
                    ByVal Valutatag As Date,  _
                    ByVal GUID_TokenAttribute_Verwendungszweck As System.Guid,  _
                    ByVal Verwendungszweck As String,  _
                    ByVal GUID_TokenAttribute_Betrag As System.Guid,  _
                    ByVal Betrag As Single) As f_Sparkasse_BankTransaktionenRow
            Dim rowf_Sparkasse_BankTransaktionenRow As f_Sparkasse_BankTransaktionenRow = CType(Me.NewRow,f_Sparkasse_BankTransaktionenRow)
            Dim columnValuesArray() As Object = New Object() {GUID_Token, Name_Token, GUID_Type, GUID_TokenAttribute_BegZahl, BegZahl, GUID_TokenAttribute_Buchungstext, Buchungstext, GUID_Token_Attribute_Info, Info, GUID_TokenAttribute_Zahlungsausgang, Zahlungsausgang, GUID_Kontonummer_Auftragskonto, Name_Kontonummer_Auftragskonto, GUID_Type_Kontonummer_Auftragskonto, GUID_Bankleitzahl_Auftragskonto, Name_Bankleitzahl_Auftragskonto, GUID_Type_Bankleitzahl_Auftragskonto, GUID_Payment, Name_Payment, GUID_Type_Payment, GUID_Kontonummer_Gegenkonto, Name_Kontonummer_Gegenkonto, GUID_Type_Kontonummer_Gegenkonto, GUID_Bankleitzahl_Gegenkonto, Name_Bankleitzahl_Gegenkonto, GUID_Type_Bankleitzahl_Gegenkonto, GUID_Currencies, Name_Currencies, GUID_Type_Currencies, GUID_Alternate_Currency_Name, Name_Alternate_Currency_Name, GUID_Type_Alternate_Currency_Name, GUID_Token_Left, GUID_TokenAttribute_Valutatag, Valutatag, GUID_TokenAttribute_Verwendungszweck, Verwendungszweck, GUID_TokenAttribute_Betrag, Betrag}
            rowf_Sparkasse_BankTransaktionenRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowf_Sparkasse_BankTransaktionenRow)
            Return rowf_Sparkasse_BankTransaktionenRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As f_Sparkasse_BankTransaktionenDataTable = CType(MyBase.Clone,f_Sparkasse_BankTransaktionenDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New f_Sparkasse_BankTransaktionenDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnGUID_Token = MyBase.Columns("GUID_Token")
            Me.columnName_Token = MyBase.Columns("Name_Token")
            Me.columnGUID_Type = MyBase.Columns("GUID_Type")
            Me.columnGUID_TokenAttribute_BegZahl = MyBase.Columns("GUID_TokenAttribute_BegZahl")
            Me.columnBegZahl = MyBase.Columns("BegZahl")
            Me.columnGUID_TokenAttribute_Buchungstext = MyBase.Columns("GUID_TokenAttribute_Buchungstext")
            Me.columnBuchungstext = MyBase.Columns("Buchungstext")
            Me.columnGUID_Token_Attribute_Info = MyBase.Columns("GUID_Token_Attribute_Info")
            Me.columnInfo = MyBase.Columns("Info")
            Me.columnGUID_TokenAttribute_Zahlungsausgang = MyBase.Columns("GUID_TokenAttribute_Zahlungsausgang")
            Me.columnZahlungsausgang = MyBase.Columns("Zahlungsausgang")
            Me.columnGUID_Kontonummer_Auftragskonto = MyBase.Columns("GUID_Kontonummer_Auftragskonto")
            Me.columnName_Kontonummer_Auftragskonto = MyBase.Columns("Name_Kontonummer_Auftragskonto")
            Me.columnGUID_Type_Kontonummer_Auftragskonto = MyBase.Columns("GUID_Type_Kontonummer_Auftragskonto")
            Me.columnGUID_Bankleitzahl_Auftragskonto = MyBase.Columns("GUID_Bankleitzahl_Auftragskonto")
            Me.columnName_Bankleitzahl_Auftragskonto = MyBase.Columns("Name_Bankleitzahl_Auftragskonto")
            Me.columnGUID_Type_Bankleitzahl_Auftragskonto = MyBase.Columns("GUID_Type_Bankleitzahl_Auftragskonto")
            Me.columnGUID_Payment = MyBase.Columns("GUID_Payment")
            Me.columnName_Payment = MyBase.Columns("Name_Payment")
            Me.columnGUID_Type_Payment = MyBase.Columns("GUID_Type_Payment")
            Me.columnGUID_Kontonummer_Gegenkonto = MyBase.Columns("GUID_Kontonummer_Gegenkonto")
            Me.columnName_Kontonummer_Gegenkonto = MyBase.Columns("Name_Kontonummer_Gegenkonto")
            Me.columnGUID_Type_Kontonummer_Gegenkonto = MyBase.Columns("GUID_Type_Kontonummer_Gegenkonto")
            Me.columnGUID_Bankleitzahl_Gegenkonto = MyBase.Columns("GUID_Bankleitzahl_Gegenkonto")
            Me.columnName_Bankleitzahl_Gegenkonto = MyBase.Columns("Name_Bankleitzahl_Gegenkonto")
            Me.columnGUID_Type_Bankleitzahl_Gegenkonto = MyBase.Columns("GUID_Type_Bankleitzahl_Gegenkonto")
            Me.columnGUID_Currencies = MyBase.Columns("GUID_Currencies")
            Me.columnName_Currencies = MyBase.Columns("Name_Currencies")
            Me.columnGUID_Type_Currencies = MyBase.Columns("GUID_Type_Currencies")
            Me.columnGUID_Alternate_Currency_Name = MyBase.Columns("GUID_Alternate_Currency_Name")
            Me.columnName_Alternate_Currency_Name = MyBase.Columns("Name_Alternate_Currency_Name")
            Me.columnGUID_Type_Alternate_Currency_Name = MyBase.Columns("GUID_Type_Alternate_Currency_Name")
            Me.columnGUID_Token_Left = MyBase.Columns("GUID_Token_Left")
            Me.columnGUID_TokenAttribute_Valutatag = MyBase.Columns("GUID_TokenAttribute_Valutatag")
            Me.columnValutatag = MyBase.Columns("Valutatag")
            Me.columnGUID_TokenAttribute_Verwendungszweck = MyBase.Columns("GUID_TokenAttribute_Verwendungszweck")
            Me.columnVerwendungszweck = MyBase.Columns("Verwendungszweck")
            Me.columnGUID_TokenAttribute_Betrag = MyBase.Columns("GUID_TokenAttribute_Betrag")
            Me.columnBetrag = MyBase.Columns("Betrag")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnGUID_Token = New Global.System.Data.DataColumn("GUID_Token", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGUID_Token)
            Me.columnName_Token = New Global.System.Data.DataColumn("Name_Token", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnName_Token)
            Me.columnGUID_Type = New Global.System.Data.DataColumn("GUID_Type", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGUID_Type)
            Me.columnGUID_TokenAttribute_BegZahl = New Global.System.Data.DataColumn("GUID_TokenAttribute_BegZahl", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGUID_TokenAttribute_BegZahl)
            Me.columnBegZahl = New Global.System.Data.DataColumn("BegZahl", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBegZahl)
            Me.columnGUID_TokenAttribute_Buchungstext = New Global.System.Data.DataColumn("GUID_TokenAttribute_Buchungstext", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGUID_TokenAttribute_Buchungstext)
            Me.columnBuchungstext = New Global.System.Data.DataColumn("Buchungstext", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBuchungstext)
            Me.columnGUID_Token_Attribute_Info = New Global.System.Data.DataColumn("GUID_Token_Attribute_Info", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGUID_Token_Attribute_Info)
            Me.columnInfo = New Global.System.Data.DataColumn("Info", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInfo)
            Me.columnGUID_TokenAttribute_Zahlungsausgang = New Global.System.Data.DataColumn("GUID_TokenAttribute_Zahlungsausgang", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGUID_TokenAttribute_Zahlungsausgang)
            Me.columnZahlungsausgang = New Global.System.Data.DataColumn("Zahlungsausgang", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZahlungsausgang)
            Me.columnGUID_Kontonummer_Auftragskonto = New Global.System.Data.DataColumn("GUID_Kontonummer_Auftragskonto", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGUID_Kontonummer_Auftragskonto)
            Me.columnName_Kontonummer_Auftragskonto = New Global.System.Data.DataColumn("Name_Kontonummer_Auftragskonto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnName_Kontonummer_Auftragskonto)
            Me.columnGUID_Type_Kontonummer_Auftragskonto = New Global.System.Data.DataColumn("GUID_Type_Kontonummer_Auftragskonto", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGUID_Type_Kontonummer_Auftragskonto)
            Me.columnGUID_Bankleitzahl_Auftragskonto = New Global.System.Data.DataColumn("GUID_Bankleitzahl_Auftragskonto", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGUID_Bankleitzahl_Auftragskonto)
            Me.columnName_Bankleitzahl_Auftragskonto = New Global.System.Data.DataColumn("Name_Bankleitzahl_Auftragskonto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnName_Bankleitzahl_Auftragskonto)
            Me.columnGUID_Type_Bankleitzahl_Auftragskonto = New Global.System.Data.DataColumn("GUID_Type_Bankleitzahl_Auftragskonto", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGUID_Type_Bankleitzahl_Auftragskonto)
            Me.columnGUID_Payment = New Global.System.Data.DataColumn("GUID_Payment", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGUID_Payment)
            Me.columnName_Payment = New Global.System.Data.DataColumn("Name_Payment", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnName_Payment)
            Me.columnGUID_Type_Payment = New Global.System.Data.DataColumn("GUID_Type_Payment", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGUID_Type_Payment)
            Me.columnGUID_Kontonummer_Gegenkonto = New Global.System.Data.DataColumn("GUID_Kontonummer_Gegenkonto", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGUID_Kontonummer_Gegenkonto)
            Me.columnName_Kontonummer_Gegenkonto = New Global.System.Data.DataColumn("Name_Kontonummer_Gegenkonto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnName_Kontonummer_Gegenkonto)
            Me.columnGUID_Type_Kontonummer_Gegenkonto = New Global.System.Data.DataColumn("GUID_Type_Kontonummer_Gegenkonto", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGUID_Type_Kontonummer_Gegenkonto)
            Me.columnGUID_Bankleitzahl_Gegenkonto = New Global.System.Data.DataColumn("GUID_Bankleitzahl_Gegenkonto", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGUID_Bankleitzahl_Gegenkonto)
            Me.columnName_Bankleitzahl_Gegenkonto = New Global.System.Data.DataColumn("Name_Bankleitzahl_Gegenkonto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnName_Bankleitzahl_Gegenkonto)
            Me.columnGUID_Type_Bankleitzahl_Gegenkonto = New Global.System.Data.DataColumn("GUID_Type_Bankleitzahl_Gegenkonto", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGUID_Type_Bankleitzahl_Gegenkonto)
            Me.columnGUID_Currencies = New Global.System.Data.DataColumn("GUID_Currencies", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGUID_Currencies)
            Me.columnName_Currencies = New Global.System.Data.DataColumn("Name_Currencies", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnName_Currencies)
            Me.columnGUID_Type_Currencies = New Global.System.Data.DataColumn("GUID_Type_Currencies", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGUID_Type_Currencies)
            Me.columnGUID_Alternate_Currency_Name = New Global.System.Data.DataColumn("GUID_Alternate_Currency_Name", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGUID_Alternate_Currency_Name)
            Me.columnName_Alternate_Currency_Name = New Global.System.Data.DataColumn("Name_Alternate_Currency_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnName_Alternate_Currency_Name)
            Me.columnGUID_Type_Alternate_Currency_Name = New Global.System.Data.DataColumn("GUID_Type_Alternate_Currency_Name", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGUID_Type_Alternate_Currency_Name)
            Me.columnGUID_Token_Left = New Global.System.Data.DataColumn("GUID_Token_Left", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGUID_Token_Left)
            Me.columnGUID_TokenAttribute_Valutatag = New Global.System.Data.DataColumn("GUID_TokenAttribute_Valutatag", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGUID_TokenAttribute_Valutatag)
            Me.columnValutatag = New Global.System.Data.DataColumn("Valutatag", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnValutatag)
            Me.columnGUID_TokenAttribute_Verwendungszweck = New Global.System.Data.DataColumn("GUID_TokenAttribute_Verwendungszweck", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGUID_TokenAttribute_Verwendungszweck)
            Me.columnVerwendungszweck = New Global.System.Data.DataColumn("Verwendungszweck", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVerwendungszweck)
            Me.columnGUID_TokenAttribute_Betrag = New Global.System.Data.DataColumn("GUID_TokenAttribute_Betrag", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGUID_TokenAttribute_Betrag)
            Me.columnBetrag = New Global.System.Data.DataColumn("Betrag", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBetrag)
            Me.columnGUID_Token.AllowDBNull = false
            Me.columnName_Token.AllowDBNull = false
            Me.columnName_Token.MaxLength = 255
            Me.columnGUID_Type.AllowDBNull = false
            Me.columnGUID_TokenAttribute_BegZahl.AllowDBNull = false
            Me.columnBegZahl.AllowDBNull = false
            Me.columnBegZahl.MaxLength = 255
            Me.columnGUID_TokenAttribute_Buchungstext.AllowDBNull = false
            Me.columnBuchungstext.AllowDBNull = false
            Me.columnBuchungstext.MaxLength = 255
            Me.columnGUID_Token_Attribute_Info.AllowDBNull = false
            Me.columnInfo.AllowDBNull = false
            Me.columnInfo.MaxLength = 255
            Me.columnGUID_TokenAttribute_Zahlungsausgang.AllowDBNull = false
            Me.columnZahlungsausgang.AllowDBNull = false
            Me.columnGUID_Kontonummer_Auftragskonto.AllowDBNull = false
            Me.columnName_Kontonummer_Auftragskonto.AllowDBNull = false
            Me.columnName_Kontonummer_Auftragskonto.MaxLength = 255
            Me.columnGUID_Type_Kontonummer_Auftragskonto.AllowDBNull = false
            Me.columnGUID_Bankleitzahl_Auftragskonto.AllowDBNull = false
            Me.columnName_Bankleitzahl_Auftragskonto.AllowDBNull = false
            Me.columnName_Bankleitzahl_Auftragskonto.MaxLength = 255
            Me.columnGUID_Type_Bankleitzahl_Auftragskonto.AllowDBNull = false
            Me.columnName_Payment.MaxLength = 255
            Me.columnGUID_Kontonummer_Gegenkonto.AllowDBNull = false
            Me.columnName_Kontonummer_Gegenkonto.AllowDBNull = false
            Me.columnName_Kontonummer_Gegenkonto.MaxLength = 255
            Me.columnGUID_Type_Kontonummer_Gegenkonto.AllowDBNull = false
            Me.columnGUID_Bankleitzahl_Gegenkonto.AllowDBNull = false
            Me.columnName_Bankleitzahl_Gegenkonto.AllowDBNull = false
            Me.columnName_Bankleitzahl_Gegenkonto.MaxLength = 255
            Me.columnGUID_Type_Bankleitzahl_Gegenkonto.AllowDBNull = false
            Me.columnGUID_Currencies.AllowDBNull = false
            Me.columnName_Currencies.AllowDBNull = false
            Me.columnName_Currencies.MaxLength = 255
            Me.columnGUID_Type_Currencies.AllowDBNull = false
            Me.columnGUID_Alternate_Currency_Name.AllowDBNull = false
            Me.columnName_Alternate_Currency_Name.AllowDBNull = false
            Me.columnName_Alternate_Currency_Name.MaxLength = 255
            Me.columnGUID_Type_Alternate_Currency_Name.AllowDBNull = false
            Me.columnGUID_Token_Left.AllowDBNull = false
            Me.columnGUID_TokenAttribute_Valutatag.AllowDBNull = false
            Me.columnValutatag.AllowDBNull = false
            Me.columnVerwendungszweck.MaxLength = 255
            Me.columnGUID_TokenAttribute_Betrag.AllowDBNull = false
            Me.columnBetrag.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Newf_Sparkasse_BankTransaktionenRow() As f_Sparkasse_BankTransaktionenRow
            Return CType(Me.NewRow,f_Sparkasse_BankTransaktionenRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New f_Sparkasse_BankTransaktionenRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(f_Sparkasse_BankTransaktionenRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.f_Sparkasse_BankTransaktionenRowChangedEvent) Is Nothing) Then
                RaiseEvent f_Sparkasse_BankTransaktionenRowChanged(Me, New f_Sparkasse_BankTransaktionenRowChangeEvent(CType(e.Row,f_Sparkasse_BankTransaktionenRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.f_Sparkasse_BankTransaktionenRowChangingEvent) Is Nothing) Then
                RaiseEvent f_Sparkasse_BankTransaktionenRowChanging(Me, New f_Sparkasse_BankTransaktionenRowChangeEvent(CType(e.Row,f_Sparkasse_BankTransaktionenRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.f_Sparkasse_BankTransaktionenRowDeletedEvent) Is Nothing) Then
                RaiseEvent f_Sparkasse_BankTransaktionenRowDeleted(Me, New f_Sparkasse_BankTransaktionenRowChangeEvent(CType(e.Row,f_Sparkasse_BankTransaktionenRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.f_Sparkasse_BankTransaktionenRowDeletingEvent) Is Nothing) Then
                RaiseEvent f_Sparkasse_BankTransaktionenRowDeleting(Me, New f_Sparkasse_BankTransaktionenRowChangeEvent(CType(e.Row,f_Sparkasse_BankTransaktionenRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Removef_Sparkasse_BankTransaktionenRow(ByVal row As f_Sparkasse_BankTransaktionenRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As ds_BankTransactionModule = New ds_BankTransactionModule()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "f_Sparkasse_BankTransaktionenDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class p_Currency_By_NameDataTable
        Inherits Global.System.Data.TypedTableBase(Of p_Currency_By_NameRow)
        
        Private columnGUID_Currencies As Global.System.Data.DataColumn
        
        Private columnName_Currencies As Global.System.Data.DataColumn
        
        Private columnGUID_Type_Currencies As Global.System.Data.DataColumn
        
        Private columnGUID_Alternate_Currency_Name As Global.System.Data.DataColumn
        
        Private columnName_Alternate_Currency_Name As Global.System.Data.DataColumn
        
        Private columnGUID_Type_Alternate_Currency_Name As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "p_Currency_By_Name"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GUID_CurrenciesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGUID_Currencies
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Name_CurrenciesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnName_Currencies
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GUID_Type_CurrenciesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGUID_Type_Currencies
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GUID_Alternate_Currency_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGUID_Alternate_Currency_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Name_Alternate_Currency_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnName_Alternate_Currency_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GUID_Type_Alternate_Currency_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGUID_Type_Alternate_Currency_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As p_Currency_By_NameRow
            Get
                Return CType(Me.Rows(index),p_Currency_By_NameRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event p_Currency_By_NameRowChanging As p_Currency_By_NameRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event p_Currency_By_NameRowChanged As p_Currency_By_NameRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event p_Currency_By_NameRowDeleting As p_Currency_By_NameRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event p_Currency_By_NameRowDeleted As p_Currency_By_NameRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub Addp_Currency_By_NameRow(ByVal row As p_Currency_By_NameRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function Addp_Currency_By_NameRow(ByVal GUID_Currencies As System.Guid, ByVal Name_Currencies As String, ByVal GUID_Type_Currencies As System.Guid, ByVal GUID_Alternate_Currency_Name As System.Guid, ByVal Name_Alternate_Currency_Name As String, ByVal GUID_Type_Alternate_Currency_Name As System.Guid) As p_Currency_By_NameRow
            Dim rowp_Currency_By_NameRow As p_Currency_By_NameRow = CType(Me.NewRow,p_Currency_By_NameRow)
            Dim columnValuesArray() As Object = New Object() {GUID_Currencies, Name_Currencies, GUID_Type_Currencies, GUID_Alternate_Currency_Name, Name_Alternate_Currency_Name, GUID_Type_Alternate_Currency_Name}
            rowp_Currency_By_NameRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowp_Currency_By_NameRow)
            Return rowp_Currency_By_NameRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByGUID_CurrenciesGUID_Alternate_Currency_Name(ByVal GUID_Currencies As System.Guid, ByVal GUID_Alternate_Currency_Name As System.Guid) As p_Currency_By_NameRow
            Return CType(Me.Rows.Find(New Object() {GUID_Currencies, GUID_Alternate_Currency_Name}),p_Currency_By_NameRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As p_Currency_By_NameDataTable = CType(MyBase.Clone,p_Currency_By_NameDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New p_Currency_By_NameDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnGUID_Currencies = MyBase.Columns("GUID_Currencies")
            Me.columnName_Currencies = MyBase.Columns("Name_Currencies")
            Me.columnGUID_Type_Currencies = MyBase.Columns("GUID_Type_Currencies")
            Me.columnGUID_Alternate_Currency_Name = MyBase.Columns("GUID_Alternate_Currency_Name")
            Me.columnName_Alternate_Currency_Name = MyBase.Columns("Name_Alternate_Currency_Name")
            Me.columnGUID_Type_Alternate_Currency_Name = MyBase.Columns("GUID_Type_Alternate_Currency_Name")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnGUID_Currencies = New Global.System.Data.DataColumn("GUID_Currencies", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGUID_Currencies)
            Me.columnName_Currencies = New Global.System.Data.DataColumn("Name_Currencies", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnName_Currencies)
            Me.columnGUID_Type_Currencies = New Global.System.Data.DataColumn("GUID_Type_Currencies", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGUID_Type_Currencies)
            Me.columnGUID_Alternate_Currency_Name = New Global.System.Data.DataColumn("GUID_Alternate_Currency_Name", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGUID_Alternate_Currency_Name)
            Me.columnName_Alternate_Currency_Name = New Global.System.Data.DataColumn("Name_Alternate_Currency_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnName_Alternate_Currency_Name)
            Me.columnGUID_Type_Alternate_Currency_Name = New Global.System.Data.DataColumn("GUID_Type_Alternate_Currency_Name", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGUID_Type_Alternate_Currency_Name)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnGUID_Currencies, Me.columnGUID_Alternate_Currency_Name}, true))
            Me.columnGUID_Currencies.AllowDBNull = false
            Me.columnName_Currencies.AllowDBNull = false
            Me.columnName_Currencies.MaxLength = 255
            Me.columnGUID_Type_Currencies.AllowDBNull = false
            Me.columnGUID_Alternate_Currency_Name.AllowDBNull = false
            Me.columnName_Alternate_Currency_Name.AllowDBNull = false
            Me.columnName_Alternate_Currency_Name.MaxLength = 255
            Me.columnGUID_Type_Alternate_Currency_Name.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Newp_Currency_By_NameRow() As p_Currency_By_NameRow
            Return CType(Me.NewRow,p_Currency_By_NameRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New p_Currency_By_NameRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(p_Currency_By_NameRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.p_Currency_By_NameRowChangedEvent) Is Nothing) Then
                RaiseEvent p_Currency_By_NameRowChanged(Me, New p_Currency_By_NameRowChangeEvent(CType(e.Row,p_Currency_By_NameRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.p_Currency_By_NameRowChangingEvent) Is Nothing) Then
                RaiseEvent p_Currency_By_NameRowChanging(Me, New p_Currency_By_NameRowChangeEvent(CType(e.Row,p_Currency_By_NameRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.p_Currency_By_NameRowDeletedEvent) Is Nothing) Then
                RaiseEvent p_Currency_By_NameRowDeleted(Me, New p_Currency_By_NameRowChangeEvent(CType(e.Row,p_Currency_By_NameRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.p_Currency_By_NameRowDeletingEvent) Is Nothing) Then
                RaiseEvent p_Currency_By_NameRowDeleting(Me, New p_Currency_By_NameRowChangeEvent(CType(e.Row,p_Currency_By_NameRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Removep_Currency_By_NameRow(ByVal row As p_Currency_By_NameRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As ds_BankTransactionModule = New ds_BankTransactionModule()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "p_Currency_By_NameDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class p_Konto_By_KTO_And_BLZDataTable
        Inherits Global.System.Data.TypedTableBase(Of p_Konto_By_KTO_And_BLZRow)
        
        Private columnGUID_Kontonummer As Global.System.Data.DataColumn
        
        Private columnName_Kontonummer As Global.System.Data.DataColumn
        
        Private columnGUID_Type_Kontonummer As Global.System.Data.DataColumn
        
        Private columnGUID_Bankleitzahl As Global.System.Data.DataColumn
        
        Private columnName_Bankleitzahl As Global.System.Data.DataColumn
        
        Private columnGUID_Type_Bankleitzahl As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "p_Konto_By_KTO_And_BLZ"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GUID_KontonummerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGUID_Kontonummer
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Name_KontonummerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnName_Kontonummer
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GUID_Type_KontonummerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGUID_Type_Kontonummer
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GUID_BankleitzahlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGUID_Bankleitzahl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Name_BankleitzahlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnName_Bankleitzahl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GUID_Type_BankleitzahlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGUID_Type_Bankleitzahl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As p_Konto_By_KTO_And_BLZRow
            Get
                Return CType(Me.Rows(index),p_Konto_By_KTO_And_BLZRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event p_Konto_By_KTO_And_BLZRowChanging As p_Konto_By_KTO_And_BLZRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event p_Konto_By_KTO_And_BLZRowChanged As p_Konto_By_KTO_And_BLZRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event p_Konto_By_KTO_And_BLZRowDeleting As p_Konto_By_KTO_And_BLZRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event p_Konto_By_KTO_And_BLZRowDeleted As p_Konto_By_KTO_And_BLZRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub Addp_Konto_By_KTO_And_BLZRow(ByVal row As p_Konto_By_KTO_And_BLZRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function Addp_Konto_By_KTO_And_BLZRow(ByVal GUID_Kontonummer As System.Guid, ByVal Name_Kontonummer As String, ByVal GUID_Type_Kontonummer As System.Guid, ByVal GUID_Bankleitzahl As System.Guid, ByVal Name_Bankleitzahl As String, ByVal GUID_Type_Bankleitzahl As System.Guid) As p_Konto_By_KTO_And_BLZRow
            Dim rowp_Konto_By_KTO_And_BLZRow As p_Konto_By_KTO_And_BLZRow = CType(Me.NewRow,p_Konto_By_KTO_And_BLZRow)
            Dim columnValuesArray() As Object = New Object() {GUID_Kontonummer, Name_Kontonummer, GUID_Type_Kontonummer, GUID_Bankleitzahl, Name_Bankleitzahl, GUID_Type_Bankleitzahl}
            rowp_Konto_By_KTO_And_BLZRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowp_Konto_By_KTO_And_BLZRow)
            Return rowp_Konto_By_KTO_And_BLZRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByGUID_KontonummerGUID_Bankleitzahl(ByVal GUID_Kontonummer As System.Guid, ByVal GUID_Bankleitzahl As System.Guid) As p_Konto_By_KTO_And_BLZRow
            Return CType(Me.Rows.Find(New Object() {GUID_Kontonummer, GUID_Bankleitzahl}),p_Konto_By_KTO_And_BLZRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As p_Konto_By_KTO_And_BLZDataTable = CType(MyBase.Clone,p_Konto_By_KTO_And_BLZDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New p_Konto_By_KTO_And_BLZDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnGUID_Kontonummer = MyBase.Columns("GUID_Kontonummer")
            Me.columnName_Kontonummer = MyBase.Columns("Name_Kontonummer")
            Me.columnGUID_Type_Kontonummer = MyBase.Columns("GUID_Type_Kontonummer")
            Me.columnGUID_Bankleitzahl = MyBase.Columns("GUID_Bankleitzahl")
            Me.columnName_Bankleitzahl = MyBase.Columns("Name_Bankleitzahl")
            Me.columnGUID_Type_Bankleitzahl = MyBase.Columns("GUID_Type_Bankleitzahl")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnGUID_Kontonummer = New Global.System.Data.DataColumn("GUID_Kontonummer", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGUID_Kontonummer)
            Me.columnName_Kontonummer = New Global.System.Data.DataColumn("Name_Kontonummer", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnName_Kontonummer)
            Me.columnGUID_Type_Kontonummer = New Global.System.Data.DataColumn("GUID_Type_Kontonummer", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGUID_Type_Kontonummer)
            Me.columnGUID_Bankleitzahl = New Global.System.Data.DataColumn("GUID_Bankleitzahl", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGUID_Bankleitzahl)
            Me.columnName_Bankleitzahl = New Global.System.Data.DataColumn("Name_Bankleitzahl", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnName_Bankleitzahl)
            Me.columnGUID_Type_Bankleitzahl = New Global.System.Data.DataColumn("GUID_Type_Bankleitzahl", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGUID_Type_Bankleitzahl)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnGUID_Kontonummer, Me.columnGUID_Bankleitzahl}, true))
            Me.columnGUID_Kontonummer.AllowDBNull = false
            Me.columnName_Kontonummer.AllowDBNull = false
            Me.columnName_Kontonummer.MaxLength = 255
            Me.columnGUID_Type_Kontonummer.AllowDBNull = false
            Me.columnGUID_Bankleitzahl.AllowDBNull = false
            Me.columnName_Bankleitzahl.AllowDBNull = false
            Me.columnName_Bankleitzahl.MaxLength = 255
            Me.columnGUID_Type_Bankleitzahl.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Newp_Konto_By_KTO_And_BLZRow() As p_Konto_By_KTO_And_BLZRow
            Return CType(Me.NewRow,p_Konto_By_KTO_And_BLZRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New p_Konto_By_KTO_And_BLZRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(p_Konto_By_KTO_And_BLZRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.p_Konto_By_KTO_And_BLZRowChangedEvent) Is Nothing) Then
                RaiseEvent p_Konto_By_KTO_And_BLZRowChanged(Me, New p_Konto_By_KTO_And_BLZRowChangeEvent(CType(e.Row,p_Konto_By_KTO_And_BLZRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.p_Konto_By_KTO_And_BLZRowChangingEvent) Is Nothing) Then
                RaiseEvent p_Konto_By_KTO_And_BLZRowChanging(Me, New p_Konto_By_KTO_And_BLZRowChangeEvent(CType(e.Row,p_Konto_By_KTO_And_BLZRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.p_Konto_By_KTO_And_BLZRowDeletedEvent) Is Nothing) Then
                RaiseEvent p_Konto_By_KTO_And_BLZRowDeleted(Me, New p_Konto_By_KTO_And_BLZRowChangeEvent(CType(e.Row,p_Konto_By_KTO_And_BLZRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.p_Konto_By_KTO_And_BLZRowDeletingEvent) Is Nothing) Then
                RaiseEvent p_Konto_By_KTO_And_BLZRowDeleting(Me, New p_Konto_By_KTO_And_BLZRowChangeEvent(CType(e.Row,p_Konto_By_KTO_And_BLZRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Removep_Konto_By_KTO_And_BLZRow(ByVal row As p_Konto_By_KTO_And_BLZRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As ds_BankTransactionModule = New ds_BankTransactionModule()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "p_Konto_By_KTO_And_BLZDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class p_ImportSettings_of_PartnerDataTable
        Inherits Global.System.Data.TypedTableBase(Of p_ImportSettings_of_PartnerRow)
        
        Private columnGUID_Kontodaten As Global.System.Data.DataColumn
        
        Private columnName_Kontodaten As Global.System.Data.DataColumn
        
        Private columnGUID_Type_Kontodaten As Global.System.Data.DataColumn
        
        Private columnGUID_Bankkonto As Global.System.Data.DataColumn
        
        Private columnName_Bankkonto As Global.System.Data.DataColumn
        
        Private columnGUID_Type_Bankkonto As Global.System.Data.DataColumn
        
        Private columnGUID_Bankinstitut As Global.System.Data.DataColumn
        
        Private columnName_Bankinstitut As Global.System.Data.DataColumn
        
        Private columnGUID_Type_Bankinstitut As Global.System.Data.DataColumn
        
        Private columnGUID_Type As Global.System.Data.DataColumn
        
        Private columnName_Type As Global.System.Data.DataColumn
        
        Private columnGUID_Import_Settings As Global.System.Data.DataColumn
        
        Private columnName_Import_Settings As Global.System.Data.DataColumn
        
        Private columnGUID_Type_Import_Settings As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "p_ImportSettings_of_Partner"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GUID_KontodatenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGUID_Kontodaten
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Name_KontodatenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnName_Kontodaten
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GUID_Type_KontodatenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGUID_Type_Kontodaten
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GUID_BankkontoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGUID_Bankkonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Name_BankkontoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnName_Bankkonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GUID_Type_BankkontoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGUID_Type_Bankkonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GUID_BankinstitutColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGUID_Bankinstitut
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Name_BankinstitutColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnName_Bankinstitut
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GUID_Type_BankinstitutColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGUID_Type_Bankinstitut
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GUID_TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGUID_Type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Name_TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnName_Type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GUID_Import_SettingsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGUID_Import_Settings
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Name_Import_SettingsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnName_Import_Settings
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GUID_Type_Import_SettingsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGUID_Type_Import_Settings
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As p_ImportSettings_of_PartnerRow
            Get
                Return CType(Me.Rows(index),p_ImportSettings_of_PartnerRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event p_ImportSettings_of_PartnerRowChanging As p_ImportSettings_of_PartnerRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event p_ImportSettings_of_PartnerRowChanged As p_ImportSettings_of_PartnerRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event p_ImportSettings_of_PartnerRowDeleting As p_ImportSettings_of_PartnerRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event p_ImportSettings_of_PartnerRowDeleted As p_ImportSettings_of_PartnerRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub Addp_ImportSettings_of_PartnerRow(ByVal row As p_ImportSettings_of_PartnerRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function Addp_ImportSettings_of_PartnerRow(ByVal GUID_Kontodaten As System.Guid, ByVal Name_Kontodaten As String, ByVal GUID_Type_Kontodaten As System.Guid, ByVal GUID_Bankkonto As System.Guid, ByVal Name_Bankkonto As String, ByVal GUID_Type_Bankkonto As System.Guid, ByVal GUID_Bankinstitut As System.Guid, ByVal Name_Bankinstitut As String, ByVal GUID_Type_Bankinstitut As System.Guid, ByVal GUID_Type As System.Guid, ByVal Name_Type As String, ByVal GUID_Import_Settings As System.Guid, ByVal Name_Import_Settings As String, ByVal GUID_Type_Import_Settings As System.Guid) As p_ImportSettings_of_PartnerRow
            Dim rowp_ImportSettings_of_PartnerRow As p_ImportSettings_of_PartnerRow = CType(Me.NewRow,p_ImportSettings_of_PartnerRow)
            Dim columnValuesArray() As Object = New Object() {GUID_Kontodaten, Name_Kontodaten, GUID_Type_Kontodaten, GUID_Bankkonto, Name_Bankkonto, GUID_Type_Bankkonto, GUID_Bankinstitut, Name_Bankinstitut, GUID_Type_Bankinstitut, GUID_Type, Name_Type, GUID_Import_Settings, Name_Import_Settings, GUID_Type_Import_Settings}
            rowp_ImportSettings_of_PartnerRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowp_ImportSettings_of_PartnerRow)
            Return rowp_ImportSettings_of_PartnerRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As p_ImportSettings_of_PartnerDataTable = CType(MyBase.Clone,p_ImportSettings_of_PartnerDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New p_ImportSettings_of_PartnerDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnGUID_Kontodaten = MyBase.Columns("GUID_Kontodaten")
            Me.columnName_Kontodaten = MyBase.Columns("Name_Kontodaten")
            Me.columnGUID_Type_Kontodaten = MyBase.Columns("GUID_Type_Kontodaten")
            Me.columnGUID_Bankkonto = MyBase.Columns("GUID_Bankkonto")
            Me.columnName_Bankkonto = MyBase.Columns("Name_Bankkonto")
            Me.columnGUID_Type_Bankkonto = MyBase.Columns("GUID_Type_Bankkonto")
            Me.columnGUID_Bankinstitut = MyBase.Columns("GUID_Bankinstitut")
            Me.columnName_Bankinstitut = MyBase.Columns("Name_Bankinstitut")
            Me.columnGUID_Type_Bankinstitut = MyBase.Columns("GUID_Type_Bankinstitut")
            Me.columnGUID_Type = MyBase.Columns("GUID_Type")
            Me.columnName_Type = MyBase.Columns("Name_Type")
            Me.columnGUID_Import_Settings = MyBase.Columns("GUID_Import_Settings")
            Me.columnName_Import_Settings = MyBase.Columns("Name_Import_Settings")
            Me.columnGUID_Type_Import_Settings = MyBase.Columns("GUID_Type_Import_Settings")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnGUID_Kontodaten = New Global.System.Data.DataColumn("GUID_Kontodaten", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGUID_Kontodaten)
            Me.columnName_Kontodaten = New Global.System.Data.DataColumn("Name_Kontodaten", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnName_Kontodaten)
            Me.columnGUID_Type_Kontodaten = New Global.System.Data.DataColumn("GUID_Type_Kontodaten", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGUID_Type_Kontodaten)
            Me.columnGUID_Bankkonto = New Global.System.Data.DataColumn("GUID_Bankkonto", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGUID_Bankkonto)
            Me.columnName_Bankkonto = New Global.System.Data.DataColumn("Name_Bankkonto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnName_Bankkonto)
            Me.columnGUID_Type_Bankkonto = New Global.System.Data.DataColumn("GUID_Type_Bankkonto", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGUID_Type_Bankkonto)
            Me.columnGUID_Bankinstitut = New Global.System.Data.DataColumn("GUID_Bankinstitut", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGUID_Bankinstitut)
            Me.columnName_Bankinstitut = New Global.System.Data.DataColumn("Name_Bankinstitut", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnName_Bankinstitut)
            Me.columnGUID_Type_Bankinstitut = New Global.System.Data.DataColumn("GUID_Type_Bankinstitut", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGUID_Type_Bankinstitut)
            Me.columnGUID_Type = New Global.System.Data.DataColumn("GUID_Type", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGUID_Type)
            Me.columnName_Type = New Global.System.Data.DataColumn("Name_Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnName_Type)
            Me.columnGUID_Import_Settings = New Global.System.Data.DataColumn("GUID_Import_Settings", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGUID_Import_Settings)
            Me.columnName_Import_Settings = New Global.System.Data.DataColumn("Name_Import_Settings", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnName_Import_Settings)
            Me.columnGUID_Type_Import_Settings = New Global.System.Data.DataColumn("GUID_Type_Import_Settings", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGUID_Type_Import_Settings)
            Me.columnGUID_Kontodaten.AllowDBNull = false
            Me.columnName_Kontodaten.AllowDBNull = false
            Me.columnName_Kontodaten.MaxLength = 255
            Me.columnGUID_Type_Kontodaten.AllowDBNull = false
            Me.columnGUID_Bankkonto.AllowDBNull = false
            Me.columnName_Bankkonto.AllowDBNull = false
            Me.columnName_Bankkonto.MaxLength = 255
            Me.columnGUID_Type_Bankkonto.AllowDBNull = false
            Me.columnGUID_Bankinstitut.AllowDBNull = false
            Me.columnName_Bankinstitut.AllowDBNull = false
            Me.columnName_Bankinstitut.MaxLength = 255
            Me.columnGUID_Type_Bankinstitut.AllowDBNull = false
            Me.columnGUID_Type.AllowDBNull = false
            Me.columnName_Type.AllowDBNull = false
            Me.columnName_Type.MaxLength = 255
            Me.columnGUID_Import_Settings.AllowDBNull = false
            Me.columnName_Import_Settings.AllowDBNull = false
            Me.columnName_Import_Settings.MaxLength = 255
            Me.columnGUID_Type_Import_Settings.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Newp_ImportSettings_of_PartnerRow() As p_ImportSettings_of_PartnerRow
            Return CType(Me.NewRow,p_ImportSettings_of_PartnerRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New p_ImportSettings_of_PartnerRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(p_ImportSettings_of_PartnerRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.p_ImportSettings_of_PartnerRowChangedEvent) Is Nothing) Then
                RaiseEvent p_ImportSettings_of_PartnerRowChanged(Me, New p_ImportSettings_of_PartnerRowChangeEvent(CType(e.Row,p_ImportSettings_of_PartnerRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.p_ImportSettings_of_PartnerRowChangingEvent) Is Nothing) Then
                RaiseEvent p_ImportSettings_of_PartnerRowChanging(Me, New p_ImportSettings_of_PartnerRowChangeEvent(CType(e.Row,p_ImportSettings_of_PartnerRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.p_ImportSettings_of_PartnerRowDeletedEvent) Is Nothing) Then
                RaiseEvent p_ImportSettings_of_PartnerRowDeleted(Me, New p_ImportSettings_of_PartnerRowChangeEvent(CType(e.Row,p_ImportSettings_of_PartnerRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.p_ImportSettings_of_PartnerRowDeletingEvent) Is Nothing) Then
                RaiseEvent p_ImportSettings_of_PartnerRowDeleting(Me, New p_ImportSettings_of_PartnerRowChangeEvent(CType(e.Row,p_ImportSettings_of_PartnerRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Removep_ImportSettings_of_PartnerRow(ByVal row As p_ImportSettings_of_PartnerRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As ds_BankTransactionModule = New ds_BankTransactionModule()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "p_ImportSettings_of_PartnerDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class p_Token_By_GUIDType_And_GUIDAttributeRow
        Inherits Global.System.Data.DataRow
        
        Private tablep_Token_By_GUIDType_And_GUIDAttribute As p_Token_By_GUIDType_And_GUIDAttributeDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablep_Token_By_GUIDType_And_GUIDAttribute = CType(Me.Table,p_Token_By_GUIDType_And_GUIDAttributeDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GUID_Token() As System.Guid
            Get
                Return CType(Me(Me.tablep_Token_By_GUIDType_And_GUIDAttribute.GUID_TokenColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tablep_Token_By_GUIDType_And_GUIDAttribute.GUID_TokenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GUID_AttributeType() As System.Guid
            Get
                Return CType(Me(Me.tablep_Token_By_GUIDType_And_GUIDAttribute.GUID_AttributeTypeColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tablep_Token_By_GUIDType_And_GUIDAttribute.GUID_AttributeTypeColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class p_Token_By_GUID_Token_And_GUIDAttributeRow
        Inherits Global.System.Data.DataRow
        
        Private tablep_Token_By_GUID_Token_And_GUIDAttribute As p_Token_By_GUID_Token_And_GUIDAttributeDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablep_Token_By_GUID_Token_And_GUIDAttribute = CType(Me.Table,p_Token_By_GUID_Token_And_GUIDAttributeDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GUID_Token() As System.Guid
            Get
                Return CType(Me(Me.tablep_Token_By_GUID_Token_And_GUIDAttribute.GUID_TokenColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tablep_Token_By_GUID_Token_And_GUIDAttribute.GUID_TokenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GUID_AttributeType() As System.Guid
            Get
                Return CType(Me(Me.tablep_Token_By_GUID_Token_And_GUIDAttribute.GUID_AttributeTypeColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tablep_Token_By_GUID_Token_And_GUIDAttribute.GUID_AttributeTypeColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class f_Sparkasse_BankTransaktionenRow
        Inherits Global.System.Data.DataRow
        
        Private tablef_Sparkasse_BankTransaktionen As f_Sparkasse_BankTransaktionenDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablef_Sparkasse_BankTransaktionen = CType(Me.Table,f_Sparkasse_BankTransaktionenDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GUID_Token() As System.Guid
            Get
                Return CType(Me(Me.tablef_Sparkasse_BankTransaktionen.GUID_TokenColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tablef_Sparkasse_BankTransaktionen.GUID_TokenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Name_Token() As String
            Get
                Return CType(Me(Me.tablef_Sparkasse_BankTransaktionen.Name_TokenColumn),String)
            End Get
            Set
                Me(Me.tablef_Sparkasse_BankTransaktionen.Name_TokenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GUID_Type() As System.Guid
            Get
                Return CType(Me(Me.tablef_Sparkasse_BankTransaktionen.GUID_TypeColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tablef_Sparkasse_BankTransaktionen.GUID_TypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GUID_TokenAttribute_BegZahl() As System.Guid
            Get
                Return CType(Me(Me.tablef_Sparkasse_BankTransaktionen.GUID_TokenAttribute_BegZahlColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tablef_Sparkasse_BankTransaktionen.GUID_TokenAttribute_BegZahlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BegZahl() As String
            Get
                Return CType(Me(Me.tablef_Sparkasse_BankTransaktionen.BegZahlColumn),String)
            End Get
            Set
                Me(Me.tablef_Sparkasse_BankTransaktionen.BegZahlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GUID_TokenAttribute_Buchungstext() As System.Guid
            Get
                Return CType(Me(Me.tablef_Sparkasse_BankTransaktionen.GUID_TokenAttribute_BuchungstextColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tablef_Sparkasse_BankTransaktionen.GUID_TokenAttribute_BuchungstextColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Buchungstext() As String
            Get
                Return CType(Me(Me.tablef_Sparkasse_BankTransaktionen.BuchungstextColumn),String)
            End Get
            Set
                Me(Me.tablef_Sparkasse_BankTransaktionen.BuchungstextColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GUID_Token_Attribute_Info() As System.Guid
            Get
                Return CType(Me(Me.tablef_Sparkasse_BankTransaktionen.GUID_Token_Attribute_InfoColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tablef_Sparkasse_BankTransaktionen.GUID_Token_Attribute_InfoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Info() As String
            Get
                Return CType(Me(Me.tablef_Sparkasse_BankTransaktionen.InfoColumn),String)
            End Get
            Set
                Me(Me.tablef_Sparkasse_BankTransaktionen.InfoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GUID_TokenAttribute_Zahlungsausgang() As System.Guid
            Get
                Return CType(Me(Me.tablef_Sparkasse_BankTransaktionen.GUID_TokenAttribute_ZahlungsausgangColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tablef_Sparkasse_BankTransaktionen.GUID_TokenAttribute_ZahlungsausgangColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Zahlungsausgang() As Boolean
            Get
                Return CType(Me(Me.tablef_Sparkasse_BankTransaktionen.ZahlungsausgangColumn),Boolean)
            End Get
            Set
                Me(Me.tablef_Sparkasse_BankTransaktionen.ZahlungsausgangColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GUID_Kontonummer_Auftragskonto() As System.Guid
            Get
                Return CType(Me(Me.tablef_Sparkasse_BankTransaktionen.GUID_Kontonummer_AuftragskontoColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tablef_Sparkasse_BankTransaktionen.GUID_Kontonummer_AuftragskontoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Name_Kontonummer_Auftragskonto() As String
            Get
                Return CType(Me(Me.tablef_Sparkasse_BankTransaktionen.Name_Kontonummer_AuftragskontoColumn),String)
            End Get
            Set
                Me(Me.tablef_Sparkasse_BankTransaktionen.Name_Kontonummer_AuftragskontoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GUID_Type_Kontonummer_Auftragskonto() As System.Guid
            Get
                Return CType(Me(Me.tablef_Sparkasse_BankTransaktionen.GUID_Type_Kontonummer_AuftragskontoColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tablef_Sparkasse_BankTransaktionen.GUID_Type_Kontonummer_AuftragskontoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GUID_Bankleitzahl_Auftragskonto() As System.Guid
            Get
                Return CType(Me(Me.tablef_Sparkasse_BankTransaktionen.GUID_Bankleitzahl_AuftragskontoColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tablef_Sparkasse_BankTransaktionen.GUID_Bankleitzahl_AuftragskontoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Name_Bankleitzahl_Auftragskonto() As String
            Get
                Return CType(Me(Me.tablef_Sparkasse_BankTransaktionen.Name_Bankleitzahl_AuftragskontoColumn),String)
            End Get
            Set
                Me(Me.tablef_Sparkasse_BankTransaktionen.Name_Bankleitzahl_AuftragskontoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GUID_Type_Bankleitzahl_Auftragskonto() As System.Guid
            Get
                Return CType(Me(Me.tablef_Sparkasse_BankTransaktionen.GUID_Type_Bankleitzahl_AuftragskontoColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tablef_Sparkasse_BankTransaktionen.GUID_Type_Bankleitzahl_AuftragskontoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GUID_Payment() As System.Guid
            Get
                Try 
                    Return CType(Me(Me.tablef_Sparkasse_BankTransaktionen.GUID_PaymentColumn),Global.System.Guid)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Der Wert für Spalte GUID_Payment in Tabelle f_Sparkasse_BankTransaktionen ist DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablef_Sparkasse_BankTransaktionen.GUID_PaymentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Name_Payment() As String
            Get
                Try 
                    Return CType(Me(Me.tablef_Sparkasse_BankTransaktionen.Name_PaymentColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Der Wert für Spalte Name_Payment in Tabelle f_Sparkasse_BankTransaktionen ist DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablef_Sparkasse_BankTransaktionen.Name_PaymentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GUID_Type_Payment() As System.Guid
            Get
                Try 
                    Return CType(Me(Me.tablef_Sparkasse_BankTransaktionen.GUID_Type_PaymentColumn),Global.System.Guid)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Der Wert für Spalte GUID_Type_Payment in Tabelle f_Sparkasse_BankTransaktionen is"& _ 
                            "t DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablef_Sparkasse_BankTransaktionen.GUID_Type_PaymentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GUID_Kontonummer_Gegenkonto() As System.Guid
            Get
                Return CType(Me(Me.tablef_Sparkasse_BankTransaktionen.GUID_Kontonummer_GegenkontoColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tablef_Sparkasse_BankTransaktionen.GUID_Kontonummer_GegenkontoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Name_Kontonummer_Gegenkonto() As String
            Get
                Return CType(Me(Me.tablef_Sparkasse_BankTransaktionen.Name_Kontonummer_GegenkontoColumn),String)
            End Get
            Set
                Me(Me.tablef_Sparkasse_BankTransaktionen.Name_Kontonummer_GegenkontoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GUID_Type_Kontonummer_Gegenkonto() As System.Guid
            Get
                Return CType(Me(Me.tablef_Sparkasse_BankTransaktionen.GUID_Type_Kontonummer_GegenkontoColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tablef_Sparkasse_BankTransaktionen.GUID_Type_Kontonummer_GegenkontoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GUID_Bankleitzahl_Gegenkonto() As System.Guid
            Get
                Return CType(Me(Me.tablef_Sparkasse_BankTransaktionen.GUID_Bankleitzahl_GegenkontoColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tablef_Sparkasse_BankTransaktionen.GUID_Bankleitzahl_GegenkontoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Name_Bankleitzahl_Gegenkonto() As String
            Get
                Return CType(Me(Me.tablef_Sparkasse_BankTransaktionen.Name_Bankleitzahl_GegenkontoColumn),String)
            End Get
            Set
                Me(Me.tablef_Sparkasse_BankTransaktionen.Name_Bankleitzahl_GegenkontoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GUID_Type_Bankleitzahl_Gegenkonto() As System.Guid
            Get
                Return CType(Me(Me.tablef_Sparkasse_BankTransaktionen.GUID_Type_Bankleitzahl_GegenkontoColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tablef_Sparkasse_BankTransaktionen.GUID_Type_Bankleitzahl_GegenkontoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GUID_Currencies() As System.Guid
            Get
                Return CType(Me(Me.tablef_Sparkasse_BankTransaktionen.GUID_CurrenciesColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tablef_Sparkasse_BankTransaktionen.GUID_CurrenciesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Name_Currencies() As String
            Get
                Return CType(Me(Me.tablef_Sparkasse_BankTransaktionen.Name_CurrenciesColumn),String)
            End Get
            Set
                Me(Me.tablef_Sparkasse_BankTransaktionen.Name_CurrenciesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GUID_Type_Currencies() As System.Guid
            Get
                Return CType(Me(Me.tablef_Sparkasse_BankTransaktionen.GUID_Type_CurrenciesColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tablef_Sparkasse_BankTransaktionen.GUID_Type_CurrenciesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GUID_Alternate_Currency_Name() As System.Guid
            Get
                Return CType(Me(Me.tablef_Sparkasse_BankTransaktionen.GUID_Alternate_Currency_NameColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tablef_Sparkasse_BankTransaktionen.GUID_Alternate_Currency_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Name_Alternate_Currency_Name() As String
            Get
                Return CType(Me(Me.tablef_Sparkasse_BankTransaktionen.Name_Alternate_Currency_NameColumn),String)
            End Get
            Set
                Me(Me.tablef_Sparkasse_BankTransaktionen.Name_Alternate_Currency_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GUID_Type_Alternate_Currency_Name() As System.Guid
            Get
                Return CType(Me(Me.tablef_Sparkasse_BankTransaktionen.GUID_Type_Alternate_Currency_NameColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tablef_Sparkasse_BankTransaktionen.GUID_Type_Alternate_Currency_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GUID_Token_Left() As System.Guid
            Get
                Return CType(Me(Me.tablef_Sparkasse_BankTransaktionen.GUID_Token_LeftColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tablef_Sparkasse_BankTransaktionen.GUID_Token_LeftColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GUID_TokenAttribute_Valutatag() As System.Guid
            Get
                Return CType(Me(Me.tablef_Sparkasse_BankTransaktionen.GUID_TokenAttribute_ValutatagColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tablef_Sparkasse_BankTransaktionen.GUID_TokenAttribute_ValutatagColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Valutatag() As Date
            Get
                Return CType(Me(Me.tablef_Sparkasse_BankTransaktionen.ValutatagColumn),Date)
            End Get
            Set
                Me(Me.tablef_Sparkasse_BankTransaktionen.ValutatagColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GUID_TokenAttribute_Verwendungszweck() As System.Guid
            Get
                Try 
                    Return CType(Me(Me.tablef_Sparkasse_BankTransaktionen.GUID_TokenAttribute_VerwendungszweckColumn),Global.System.Guid)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Der Wert für Spalte GUID_TokenAttribute_Verwendungszweck in Tabelle f_Sparkasse_B"& _ 
                            "ankTransaktionen ist DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablef_Sparkasse_BankTransaktionen.GUID_TokenAttribute_VerwendungszweckColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Verwendungszweck() As String
            Get
                Try 
                    Return CType(Me(Me.tablef_Sparkasse_BankTransaktionen.VerwendungszweckColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Der Wert für Spalte Verwendungszweck in Tabelle f_Sparkasse_BankTransaktionen ist"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablef_Sparkasse_BankTransaktionen.VerwendungszweckColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GUID_TokenAttribute_Betrag() As System.Guid
            Get
                Return CType(Me(Me.tablef_Sparkasse_BankTransaktionen.GUID_TokenAttribute_BetragColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tablef_Sparkasse_BankTransaktionen.GUID_TokenAttribute_BetragColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Betrag() As Single
            Get
                Return CType(Me(Me.tablef_Sparkasse_BankTransaktionen.BetragColumn),Single)
            End Get
            Set
                Me(Me.tablef_Sparkasse_BankTransaktionen.BetragColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsGUID_PaymentNull() As Boolean
            Return Me.IsNull(Me.tablef_Sparkasse_BankTransaktionen.GUID_PaymentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetGUID_PaymentNull()
            Me(Me.tablef_Sparkasse_BankTransaktionen.GUID_PaymentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsName_PaymentNull() As Boolean
            Return Me.IsNull(Me.tablef_Sparkasse_BankTransaktionen.Name_PaymentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetName_PaymentNull()
            Me(Me.tablef_Sparkasse_BankTransaktionen.Name_PaymentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsGUID_Type_PaymentNull() As Boolean
            Return Me.IsNull(Me.tablef_Sparkasse_BankTransaktionen.GUID_Type_PaymentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetGUID_Type_PaymentNull()
            Me(Me.tablef_Sparkasse_BankTransaktionen.GUID_Type_PaymentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsGUID_TokenAttribute_VerwendungszweckNull() As Boolean
            Return Me.IsNull(Me.tablef_Sparkasse_BankTransaktionen.GUID_TokenAttribute_VerwendungszweckColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetGUID_TokenAttribute_VerwendungszweckNull()
            Me(Me.tablef_Sparkasse_BankTransaktionen.GUID_TokenAttribute_VerwendungszweckColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsVerwendungszweckNull() As Boolean
            Return Me.IsNull(Me.tablef_Sparkasse_BankTransaktionen.VerwendungszweckColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetVerwendungszweckNull()
            Me(Me.tablef_Sparkasse_BankTransaktionen.VerwendungszweckColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class p_Currency_By_NameRow
        Inherits Global.System.Data.DataRow
        
        Private tablep_Currency_By_Name As p_Currency_By_NameDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablep_Currency_By_Name = CType(Me.Table,p_Currency_By_NameDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GUID_Currencies() As System.Guid
            Get
                Return CType(Me(Me.tablep_Currency_By_Name.GUID_CurrenciesColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tablep_Currency_By_Name.GUID_CurrenciesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Name_Currencies() As String
            Get
                Return CType(Me(Me.tablep_Currency_By_Name.Name_CurrenciesColumn),String)
            End Get
            Set
                Me(Me.tablep_Currency_By_Name.Name_CurrenciesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GUID_Type_Currencies() As System.Guid
            Get
                Return CType(Me(Me.tablep_Currency_By_Name.GUID_Type_CurrenciesColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tablep_Currency_By_Name.GUID_Type_CurrenciesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GUID_Alternate_Currency_Name() As System.Guid
            Get
                Return CType(Me(Me.tablep_Currency_By_Name.GUID_Alternate_Currency_NameColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tablep_Currency_By_Name.GUID_Alternate_Currency_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Name_Alternate_Currency_Name() As String
            Get
                Return CType(Me(Me.tablep_Currency_By_Name.Name_Alternate_Currency_NameColumn),String)
            End Get
            Set
                Me(Me.tablep_Currency_By_Name.Name_Alternate_Currency_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GUID_Type_Alternate_Currency_Name() As System.Guid
            Get
                Return CType(Me(Me.tablep_Currency_By_Name.GUID_Type_Alternate_Currency_NameColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tablep_Currency_By_Name.GUID_Type_Alternate_Currency_NameColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class p_Konto_By_KTO_And_BLZRow
        Inherits Global.System.Data.DataRow
        
        Private tablep_Konto_By_KTO_And_BLZ As p_Konto_By_KTO_And_BLZDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablep_Konto_By_KTO_And_BLZ = CType(Me.Table,p_Konto_By_KTO_And_BLZDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GUID_Kontonummer() As System.Guid
            Get
                Return CType(Me(Me.tablep_Konto_By_KTO_And_BLZ.GUID_KontonummerColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tablep_Konto_By_KTO_And_BLZ.GUID_KontonummerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Name_Kontonummer() As String
            Get
                Return CType(Me(Me.tablep_Konto_By_KTO_And_BLZ.Name_KontonummerColumn),String)
            End Get
            Set
                Me(Me.tablep_Konto_By_KTO_And_BLZ.Name_KontonummerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GUID_Type_Kontonummer() As System.Guid
            Get
                Return CType(Me(Me.tablep_Konto_By_KTO_And_BLZ.GUID_Type_KontonummerColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tablep_Konto_By_KTO_And_BLZ.GUID_Type_KontonummerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GUID_Bankleitzahl() As System.Guid
            Get
                Return CType(Me(Me.tablep_Konto_By_KTO_And_BLZ.GUID_BankleitzahlColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tablep_Konto_By_KTO_And_BLZ.GUID_BankleitzahlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Name_Bankleitzahl() As String
            Get
                Return CType(Me(Me.tablep_Konto_By_KTO_And_BLZ.Name_BankleitzahlColumn),String)
            End Get
            Set
                Me(Me.tablep_Konto_By_KTO_And_BLZ.Name_BankleitzahlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GUID_Type_Bankleitzahl() As System.Guid
            Get
                Return CType(Me(Me.tablep_Konto_By_KTO_And_BLZ.GUID_Type_BankleitzahlColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tablep_Konto_By_KTO_And_BLZ.GUID_Type_BankleitzahlColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class p_ImportSettings_of_PartnerRow
        Inherits Global.System.Data.DataRow
        
        Private tablep_ImportSettings_of_Partner As p_ImportSettings_of_PartnerDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablep_ImportSettings_of_Partner = CType(Me.Table,p_ImportSettings_of_PartnerDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GUID_Kontodaten() As System.Guid
            Get
                Return CType(Me(Me.tablep_ImportSettings_of_Partner.GUID_KontodatenColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tablep_ImportSettings_of_Partner.GUID_KontodatenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Name_Kontodaten() As String
            Get
                Return CType(Me(Me.tablep_ImportSettings_of_Partner.Name_KontodatenColumn),String)
            End Get
            Set
                Me(Me.tablep_ImportSettings_of_Partner.Name_KontodatenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GUID_Type_Kontodaten() As System.Guid
            Get
                Return CType(Me(Me.tablep_ImportSettings_of_Partner.GUID_Type_KontodatenColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tablep_ImportSettings_of_Partner.GUID_Type_KontodatenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GUID_Bankkonto() As System.Guid
            Get
                Return CType(Me(Me.tablep_ImportSettings_of_Partner.GUID_BankkontoColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tablep_ImportSettings_of_Partner.GUID_BankkontoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Name_Bankkonto() As String
            Get
                Return CType(Me(Me.tablep_ImportSettings_of_Partner.Name_BankkontoColumn),String)
            End Get
            Set
                Me(Me.tablep_ImportSettings_of_Partner.Name_BankkontoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GUID_Type_Bankkonto() As System.Guid
            Get
                Return CType(Me(Me.tablep_ImportSettings_of_Partner.GUID_Type_BankkontoColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tablep_ImportSettings_of_Partner.GUID_Type_BankkontoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GUID_Bankinstitut() As System.Guid
            Get
                Return CType(Me(Me.tablep_ImportSettings_of_Partner.GUID_BankinstitutColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tablep_ImportSettings_of_Partner.GUID_BankinstitutColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Name_Bankinstitut() As String
            Get
                Return CType(Me(Me.tablep_ImportSettings_of_Partner.Name_BankinstitutColumn),String)
            End Get
            Set
                Me(Me.tablep_ImportSettings_of_Partner.Name_BankinstitutColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GUID_Type_Bankinstitut() As System.Guid
            Get
                Return CType(Me(Me.tablep_ImportSettings_of_Partner.GUID_Type_BankinstitutColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tablep_ImportSettings_of_Partner.GUID_Type_BankinstitutColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GUID_Type() As System.Guid
            Get
                Return CType(Me(Me.tablep_ImportSettings_of_Partner.GUID_TypeColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tablep_ImportSettings_of_Partner.GUID_TypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Name_Type() As String
            Get
                Return CType(Me(Me.tablep_ImportSettings_of_Partner.Name_TypeColumn),String)
            End Get
            Set
                Me(Me.tablep_ImportSettings_of_Partner.Name_TypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GUID_Import_Settings() As System.Guid
            Get
                Return CType(Me(Me.tablep_ImportSettings_of_Partner.GUID_Import_SettingsColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tablep_ImportSettings_of_Partner.GUID_Import_SettingsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Name_Import_Settings() As String
            Get
                Return CType(Me(Me.tablep_ImportSettings_of_Partner.Name_Import_SettingsColumn),String)
            End Get
            Set
                Me(Me.tablep_ImportSettings_of_Partner.Name_Import_SettingsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GUID_Type_Import_Settings() As System.Guid
            Get
                Return CType(Me(Me.tablep_ImportSettings_of_Partner.GUID_Type_Import_SettingsColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tablep_ImportSettings_of_Partner.GUID_Type_Import_SettingsColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class p_Token_By_GUIDType_And_GUIDAttributeRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As p_Token_By_GUIDType_And_GUIDAttributeRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As p_Token_By_GUIDType_And_GUIDAttributeRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As p_Token_By_GUIDType_And_GUIDAttributeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class p_Token_By_GUID_Token_And_GUIDAttributeRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As p_Token_By_GUID_Token_And_GUIDAttributeRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As p_Token_By_GUID_Token_And_GUIDAttributeRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As p_Token_By_GUID_Token_And_GUIDAttributeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class f_Sparkasse_BankTransaktionenRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As f_Sparkasse_BankTransaktionenRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As f_Sparkasse_BankTransaktionenRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As f_Sparkasse_BankTransaktionenRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class p_Currency_By_NameRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As p_Currency_By_NameRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As p_Currency_By_NameRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As p_Currency_By_NameRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class p_Konto_By_KTO_And_BLZRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As p_Konto_By_KTO_And_BLZRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As p_Konto_By_KTO_And_BLZRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As p_Konto_By_KTO_And_BLZRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class p_ImportSettings_of_PartnerRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As p_ImportSettings_of_PartnerRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As p_ImportSettings_of_PartnerRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As p_ImportSettings_of_PartnerRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace ds_BankTransactionModuleTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class p_Token_By_GUIDType_And_GUIDAttributeTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "p_Token_By_GUIDType_And_GUIDAttribute"
            tableMapping.ColumnMappings.Add("GUID_Token", "GUID_Token")
            tableMapping.ColumnMappings.Add("GUID_AttributeType", "GUID_AttributeType")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Bank_Transaction_Module.My.MySettings.Default.sem_db_system_BankTransaction_ModuleConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.p_Token_By_GUIDType_And_GUIDAttribute"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GUID_Attribute", Global.System.Data.SqlDbType.UniqueIdentifier, 16, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GUID_Type", Global.System.Data.SqlDbType.UniqueIdentifier, 16, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ds_BankTransactionModule.p_Token_By_GUIDType_And_GUIDAttributeDataTable, ByVal GUID_Attribute As Global.System.Nullable(Of Global.System.Guid), ByVal GUID_Type As Global.System.Nullable(Of Global.System.Guid)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (GUID_Attribute.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(GUID_Attribute.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (GUID_Type.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(GUID_Type.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal GUID_Attribute As Global.System.Nullable(Of Global.System.Guid), ByVal GUID_Type As Global.System.Nullable(Of Global.System.Guid)) As ds_BankTransactionModule.p_Token_By_GUIDType_And_GUIDAttributeDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (GUID_Attribute.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(GUID_Attribute.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (GUID_Type.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(GUID_Type.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As ds_BankTransactionModule.p_Token_By_GUIDType_And_GUIDAttributeDataTable = New ds_BankTransactionModule.p_Token_By_GUIDType_And_GUIDAttributeDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class p_Token_By_GUID_Token_And_GUIDAttributeTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "p_Token_By_GUID_Token_And_GUIDAttribute"
            tableMapping.ColumnMappings.Add("GUID_Token", "GUID_Token")
            tableMapping.ColumnMappings.Add("GUID_AttributeType", "GUID_AttributeType")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Bank_Transaction_Module.My.MySettings.Default.sem_db_system_BankTransaction_ModuleConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.p_Token_By_GUID_Token_And_GUIDAttribute"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GUID_Attribute", Global.System.Data.SqlDbType.UniqueIdentifier, 16, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GUID_Token", Global.System.Data.SqlDbType.UniqueIdentifier, 16, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ds_BankTransactionModule.p_Token_By_GUID_Token_And_GUIDAttributeDataTable, ByVal GUID_Attribute As Global.System.Nullable(Of Global.System.Guid), ByVal GUID_Token As Global.System.Nullable(Of Global.System.Guid)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (GUID_Attribute.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(GUID_Attribute.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (GUID_Token.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(GUID_Token.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal GUID_Attribute As Global.System.Nullable(Of Global.System.Guid), ByVal GUID_Token As Global.System.Nullable(Of Global.System.Guid)) As ds_BankTransactionModule.p_Token_By_GUID_Token_And_GUIDAttributeDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (GUID_Attribute.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(GUID_Attribute.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (GUID_Token.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(GUID_Token.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As ds_BankTransactionModule.p_Token_By_GUID_Token_And_GUIDAttributeDataTable = New ds_BankTransactionModule.p_Token_By_GUID_Token_And_GUIDAttributeDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class f_Sparkasse_BankTransaktionenTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "f_Sparkasse_BankTransaktionen"
            tableMapping.ColumnMappings.Add("GUID_Token", "GUID_Token")
            tableMapping.ColumnMappings.Add("Name_Token", "Name_Token")
            tableMapping.ColumnMappings.Add("GUID_Type", "GUID_Type")
            tableMapping.ColumnMappings.Add("GUID_TokenAttribute_BegZahl", "GUID_TokenAttribute_BegZahl")
            tableMapping.ColumnMappings.Add("BegZahl", "BegZahl")
            tableMapping.ColumnMappings.Add("GUID_TokenAttribute_Buchungstext", "GUID_TokenAttribute_Buchungstext")
            tableMapping.ColumnMappings.Add("Buchungstext", "Buchungstext")
            tableMapping.ColumnMappings.Add("GUID_Token_Attribute_Info", "GUID_Token_Attribute_Info")
            tableMapping.ColumnMappings.Add("Info", "Info")
            tableMapping.ColumnMappings.Add("GUID_TokenAttribute_Zahlungsausgang", "GUID_TokenAttribute_Zahlungsausgang")
            tableMapping.ColumnMappings.Add("Zahlungsausgang", "Zahlungsausgang")
            tableMapping.ColumnMappings.Add("GUID_Kontonummer_Auftragskonto", "GUID_Kontonummer_Auftragskonto")
            tableMapping.ColumnMappings.Add("Name_Kontonummer_Auftragskonto", "Name_Kontonummer_Auftragskonto")
            tableMapping.ColumnMappings.Add("GUID_Type_Kontonummer_Auftragskonto", "GUID_Type_Kontonummer_Auftragskonto")
            tableMapping.ColumnMappings.Add("GUID_Bankleitzahl_Auftragskonto", "GUID_Bankleitzahl_Auftragskonto")
            tableMapping.ColumnMappings.Add("Name_Bankleitzahl_Auftragskonto", "Name_Bankleitzahl_Auftragskonto")
            tableMapping.ColumnMappings.Add("GUID_Type_Bankleitzahl_Auftragskonto", "GUID_Type_Bankleitzahl_Auftragskonto")
            tableMapping.ColumnMappings.Add("GUID_Payment", "GUID_Payment")
            tableMapping.ColumnMappings.Add("Name_Payment", "Name_Payment")
            tableMapping.ColumnMappings.Add("GUID_Type_Payment", "GUID_Type_Payment")
            tableMapping.ColumnMappings.Add("GUID_Kontonummer_Gegenkonto", "GUID_Kontonummer_Gegenkonto")
            tableMapping.ColumnMappings.Add("Name_Kontonummer_Gegenkonto", "Name_Kontonummer_Gegenkonto")
            tableMapping.ColumnMappings.Add("GUID_Type_Kontonummer_Gegenkonto", "GUID_Type_Kontonummer_Gegenkonto")
            tableMapping.ColumnMappings.Add("GUID_Bankleitzahl_Gegenkonto", "GUID_Bankleitzahl_Gegenkonto")
            tableMapping.ColumnMappings.Add("Name_Bankleitzahl_Gegenkonto", "Name_Bankleitzahl_Gegenkonto")
            tableMapping.ColumnMappings.Add("GUID_Type_Bankleitzahl_Gegenkonto", "GUID_Type_Bankleitzahl_Gegenkonto")
            tableMapping.ColumnMappings.Add("GUID_Currencies", "GUID_Currencies")
            tableMapping.ColumnMappings.Add("Name_Currencies", "Name_Currencies")
            tableMapping.ColumnMappings.Add("GUID_Type_Currencies", "GUID_Type_Currencies")
            tableMapping.ColumnMappings.Add("GUID_Alternate_Currency_Name", "GUID_Alternate_Currency_Name")
            tableMapping.ColumnMappings.Add("Name_Alternate_Currency_Name", "Name_Alternate_Currency_Name")
            tableMapping.ColumnMappings.Add("GUID_Type_Alternate_Currency_Name", "GUID_Type_Alternate_Currency_Name")
            tableMapping.ColumnMappings.Add("GUID_Token_Left", "GUID_Token_Left")
            tableMapping.ColumnMappings.Add("GUID_TokenAttribute_Valutatag", "GUID_TokenAttribute_Valutatag")
            tableMapping.ColumnMappings.Add("Valutatag", "Valutatag")
            tableMapping.ColumnMappings.Add("GUID_TokenAttribute_Verwendungszweck", "GUID_TokenAttribute_Verwendungszweck")
            tableMapping.ColumnMappings.Add("Verwendungszweck", "Verwendungszweck")
            tableMapping.ColumnMappings.Add("GUID_TokenAttribute_Betrag", "GUID_TokenAttribute_Betrag")
            tableMapping.ColumnMappings.Add("Betrag", "Betrag")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Bank_Transaction_Module.My.MySettings.Default.sem_db_system_BankTransaction_ModuleConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(2) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        GUID_Token, Name_Token, GUID_Type, GUID_TokenAttribute_BegZahl, Beg"& _ 
                "Zahl, GUID_TokenAttribute_Buchungstext, Buchungstext, GUID_Token_Attribute_Info,"& _ 
                " "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Info, GUID_TokenAttribute_Zahlungsausgang, Zahlungsa"& _ 
                "usgang, GUID_Kontonummer_Auftragskonto, Name_Kontonummer_Auftragskonto, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      "& _ 
                "                   GUID_Type_Kontonummer_Auftragskonto, GUID_Bankleitzahl_Auftra"& _ 
                "gskonto, Name_Bankleitzahl_Auftragskonto, GUID_Type_Bankleitzahl_Auftragskonto, "& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         GUID_Payment, Name_Payment, GUID_Type_Payment, GUID_K"& _ 
                "ontonummer_Gegenkonto, Name_Kontonummer_Gegenkonto, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         G"& _ 
                "UID_Type_Kontonummer_Gegenkonto, GUID_Bankleitzahl_Gegenkonto, Name_Bankleitzahl"& _ 
                "_Gegenkonto, GUID_Type_Bankleitzahl_Gegenkonto, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         GUID_"& _ 
                "Currencies, Name_Currencies, GUID_Type_Currencies, GUID_Alternate_Currency_Name,"& _ 
                " Name_Alternate_Currency_Name, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         GUID_Type_Alternate_Cu"& _ 
                "rrency_Name, GUID_Token_Left, GUID_TokenAttribute_Valutatag, Valutatag, GUID_Tok"& _ 
                "enAttribute_Verwendungszweck, Verwendungszweck, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         GUID_"& _ 
                "TokenAttribute_Betrag, Betrag"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            dbo.f_Sparkasse_BankTransaktionen"& _ 
                "(@GUID_Attribute_BegZahl, @GUID_Attribute_Buchungstext, @GUID_Attribute_Verwendu"& _ 
                "ngszweck, @GUID_Attribute_Info, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         @GUID_Attribute_Zahlu"& _ 
                "ngsausgang, @GUID_Attribute_Valutatag, @GUID_Attribute_Betrag, @GUID_Type_BankTr"& _ 
                "ansacationSparkasse, @GUID_Type_Currencies, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         @GUID_Typ"& _ 
                "e_AlternateCurrencyNames, @GUID_Type_Kontonummer, @GUID_Type_Bankleitzahl, @GUID"& _ 
                "_Type_Payment, @GUID_RelationType_belongsTo, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         @GUID_Re"& _ 
                "lationType_Auftragskonto, @GUID_RelationType_Gegenkonto, @GUID_RelationType_belo"& _ 
                "nging, @GUID_RelationType_offers) "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         AS f_Sparkasse_Bank"& _ 
                "Transaktionen_1"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GUID_Attribute_BegZahl", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GUID_Attribute_Buchungstext", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GUID_Attribute_Verwendungszweck", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GUID_Attribute_Info", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GUID_Attribute_Zahlungsausgang", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GUID_Attribute_Valutatag", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GUID_Attribute_Betrag", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GUID_Type_BankTransacationSparkasse", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GUID_Type_Currencies", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GUID_Type_AlternateCurrencyNames", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GUID_Type_Kontonummer", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GUID_Type_Bankleitzahl", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GUID_Type_Payment", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GUID_RelationType_belongsTo", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GUID_RelationType_Auftragskonto", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GUID_RelationType_Gegenkonto", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GUID_RelationType_belonging", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GUID_RelationType_offers", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "dbo.p_Sparkasse_BankTransaktionen_Import"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GUID_Attribute_BegZahl", Global.System.Data.SqlDbType.UniqueIdentifier, 16, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GUID_Attribute_Buchungstext", Global.System.Data.SqlDbType.UniqueIdentifier, 16, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GUID_Attribute_Verwendungszweck", Global.System.Data.SqlDbType.UniqueIdentifier, 16, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GUID_Attribute_Zahlungsausgang", Global.System.Data.SqlDbType.UniqueIdentifier, 16, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GUID_Attribute_Info", Global.System.Data.SqlDbType.UniqueIdentifier, 16, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GUID_Attribute_Valutatag", Global.System.Data.SqlDbType.UniqueIdentifier, 16, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GUID_Attribute_Betrag", Global.System.Data.SqlDbType.UniqueIdentifier, 16, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GUID_Type_BankTransacationSparkasse", Global.System.Data.SqlDbType.UniqueIdentifier, 16, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GUID_Type_Currencies", Global.System.Data.SqlDbType.UniqueIdentifier, 16, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GUID_Type_AlternateCurrencyNames", Global.System.Data.SqlDbType.UniqueIdentifier, 16, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GUID_Type_Kontonummer", Global.System.Data.SqlDbType.UniqueIdentifier, 16, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GUID_Type_Bankleitzahl", Global.System.Data.SqlDbType.UniqueIdentifier, 16, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GUID_Type_Payment", Global.System.Data.SqlDbType.UniqueIdentifier, 16, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GUID_RelationType_belongsTo", Global.System.Data.SqlDbType.UniqueIdentifier, 16, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GUID_RelationType_Auftragskonto", Global.System.Data.SqlDbType.UniqueIdentifier, 16, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GUID_RelationType_Gegenkonto", Global.System.Data.SqlDbType.UniqueIdentifier, 16, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GUID_RelationType_belonging", Global.System.Data.SqlDbType.UniqueIdentifier, 16, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GUID_RelationType_offers", Global.System.Data.SqlDbType.UniqueIdentifier, 16, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Info", Global.System.Data.SqlDbType.VarChar, 255, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Valutatag", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Zahlungsausgang", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 1, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BegZahl", Global.System.Data.SqlDbType.VarChar, 255, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Betrag", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 24, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Buchungstext", Global.System.Data.SqlDbType.VarChar, 255, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Verwendungszweck", Global.System.Data.SqlDbType.VarChar, 255, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Currency", Global.System.Data.SqlDbType.VarChar, 255, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Auftragskonto", Global.System.Data.SqlDbType.VarChar, 255, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Gegenkonto", Global.System.Data.SqlDbType.VarChar, 255, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BLZ_Gegenkonto", Global.System.Data.SqlDbType.VarChar, 255, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT        GUID_Token, Name_Token, GUID_Type, GUID_TokenAttribute_BegZahl, Beg"& _ 
                "Zahl, GUID_TokenAttribute_Buchungstext, Buchungstext, GUID_Token_Attribute_Info,"& _ 
                " "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Info, GUID_TokenAttribute_Zahlungsausgang, Zahlungsa"& _ 
                "usgang, GUID_Kontonummer_Auftragskonto, Name_Kontonummer_Auftragskonto, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      "& _ 
                "                   GUID_Type_Kontonummer_Auftragskonto, GUID_Bankleitzahl_Auftra"& _ 
                "gskonto, Name_Bankleitzahl_Auftragskonto, GUID_Type_Bankleitzahl_Auftragskonto, "& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         GUID_Payment, Name_Payment, GUID_Type_Payment, GUID_K"& _ 
                "ontonummer_Gegenkonto, Name_Kontonummer_Gegenkonto, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         G"& _ 
                "UID_Type_Kontonummer_Gegenkonto, GUID_Bankleitzahl_Gegenkonto, Name_Bankleitzahl"& _ 
                "_Gegenkonto, GUID_Type_Bankleitzahl_Gegenkonto, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         GUID_"& _ 
                "Currencies, Name_Currencies, GUID_Type_Currencies, GUID_Alternate_Currency_Name,"& _ 
                " Name_Alternate_Currency_Name, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         GUID_Type_Alternate_Cu"& _ 
                "rrency_Name, GUID_Token_Left, GUID_TokenAttribute_Valutatag, Valutatag, GUID_Tok"& _ 
                "enAttribute_Verwendungszweck, Verwendungszweck, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         GUID_"& _ 
                "TokenAttribute_Betrag, Betrag"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            dbo.f_Sparkasse_BankTransaktionen"& _ 
                "_AndArchive(@GUID_Attribute_BegZahl, @GUID_Attribute_Buchungstext, @GUID_Attribu"& _ 
                "te_Verwendungszweck, @GUID_Attribute_Info, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         @GUID_Attr"& _ 
                "ibute_Zahlungsausgang, @GUID_Attribute_Valutatag, @GUID_Attribute_Betrag, @GUID_"& _ 
                "Type_BankTransacationSparkasse, @GUID_Type_BankTransacationSparkasse_Archive, @G"& _ 
                "UID_Type_Currencies, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         @GUID_Type_AlternateCurrencyName"& _ 
                "s, @GUID_Type_Kontonummer, @GUID_Type_Bankleitzahl, @GUID_Type_Payment, @GUID_Re"& _ 
                "lationType_belongsTo, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         @GUID_RelationType_Auftragskont"& _ 
                "o, @GUID_RelationType_Gegenkonto, @GUID_RelationType_belonging, @GUID_RelationTy"& _ 
                "pe_offers) "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         AS f_Sparkasse_BankTransaktionen_1"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GUID_Attribute_BegZahl", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GUID_Attribute_Buchungstext", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GUID_Attribute_Verwendungszweck", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GUID_Attribute_Info", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GUID_Attribute_Zahlungsausgang", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GUID_Attribute_Valutatag", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GUID_Attribute_Betrag", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GUID_Type_BankTransacationSparkasse", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GUID_Type_BankTransacationSparkasse_Archive", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GUID_Type_Currencies", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GUID_Type_AlternateCurrencyNames", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GUID_Type_Kontonummer", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GUID_Type_Bankleitzahl", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GUID_Type_Payment", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GUID_RelationType_belongsTo", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GUID_RelationType_Auftragskonto", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GUID_RelationType_Gegenkonto", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GUID_RelationType_belonging", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GUID_RelationType_offers", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill( _
                    ByVal dataTable As ds_BankTransactionModule.f_Sparkasse_BankTransaktionenDataTable,  _
                    ByVal GUID_Attribute_BegZahl As System.Guid,  _
                    ByVal GUID_Attribute_Buchungstext As System.Guid,  _
                    ByVal GUID_Attribute_Verwendungszweck As System.Guid,  _
                    ByVal GUID_Attribute_Info As System.Guid,  _
                    ByVal GUID_Attribute_Zahlungsausgang As System.Guid,  _
                    ByVal GUID_Attribute_Valutatag As System.Guid,  _
                    ByVal GUID_Attribute_Betrag As System.Guid,  _
                    ByVal GUID_Type_BankTransacationSparkasse As System.Guid,  _
                    ByVal GUID_Type_Currencies As System.Guid,  _
                    ByVal GUID_Type_AlternateCurrencyNames As System.Guid,  _
                    ByVal GUID_Type_Kontonummer As System.Guid,  _
                    ByVal GUID_Type_Bankleitzahl As System.Guid,  _
                    ByVal GUID_Type_Payment As System.Guid,  _
                    ByVal GUID_RelationType_belongsTo As System.Guid,  _
                    ByVal GUID_RelationType_Auftragskonto As System.Guid,  _
                    ByVal GUID_RelationType_Gegenkonto As System.Guid,  _
                    ByVal GUID_RelationType_belonging As System.Guid,  _
                    ByVal GUID_RelationType_offers As System.Guid) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(GUID_Attribute_BegZahl,System.Guid)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(GUID_Attribute_Buchungstext,System.Guid)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(GUID_Attribute_Verwendungszweck,System.Guid)
            Me.Adapter.SelectCommand.Parameters(3).Value = CType(GUID_Attribute_Info,System.Guid)
            Me.Adapter.SelectCommand.Parameters(4).Value = CType(GUID_Attribute_Zahlungsausgang,System.Guid)
            Me.Adapter.SelectCommand.Parameters(5).Value = CType(GUID_Attribute_Valutatag,System.Guid)
            Me.Adapter.SelectCommand.Parameters(6).Value = CType(GUID_Attribute_Betrag,System.Guid)
            Me.Adapter.SelectCommand.Parameters(7).Value = CType(GUID_Type_BankTransacationSparkasse,System.Guid)
            Me.Adapter.SelectCommand.Parameters(8).Value = CType(GUID_Type_Currencies,System.Guid)
            Me.Adapter.SelectCommand.Parameters(9).Value = CType(GUID_Type_AlternateCurrencyNames,System.Guid)
            Me.Adapter.SelectCommand.Parameters(10).Value = CType(GUID_Type_Kontonummer,System.Guid)
            Me.Adapter.SelectCommand.Parameters(11).Value = CType(GUID_Type_Bankleitzahl,System.Guid)
            Me.Adapter.SelectCommand.Parameters(12).Value = CType(GUID_Type_Payment,System.Guid)
            Me.Adapter.SelectCommand.Parameters(13).Value = CType(GUID_RelationType_belongsTo,System.Guid)
            Me.Adapter.SelectCommand.Parameters(14).Value = CType(GUID_RelationType_Auftragskonto,System.Guid)
            Me.Adapter.SelectCommand.Parameters(15).Value = CType(GUID_RelationType_Gegenkonto,System.Guid)
            Me.Adapter.SelectCommand.Parameters(16).Value = CType(GUID_RelationType_belonging,System.Guid)
            Me.Adapter.SelectCommand.Parameters(17).Value = CType(GUID_RelationType_offers,System.Guid)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData( _
                    ByVal GUID_Attribute_BegZahl As System.Guid,  _
                    ByVal GUID_Attribute_Buchungstext As System.Guid,  _
                    ByVal GUID_Attribute_Verwendungszweck As System.Guid,  _
                    ByVal GUID_Attribute_Info As System.Guid,  _
                    ByVal GUID_Attribute_Zahlungsausgang As System.Guid,  _
                    ByVal GUID_Attribute_Valutatag As System.Guid,  _
                    ByVal GUID_Attribute_Betrag As System.Guid,  _
                    ByVal GUID_Type_BankTransacationSparkasse As System.Guid,  _
                    ByVal GUID_Type_Currencies As System.Guid,  _
                    ByVal GUID_Type_AlternateCurrencyNames As System.Guid,  _
                    ByVal GUID_Type_Kontonummer As System.Guid,  _
                    ByVal GUID_Type_Bankleitzahl As System.Guid,  _
                    ByVal GUID_Type_Payment As System.Guid,  _
                    ByVal GUID_RelationType_belongsTo As System.Guid,  _
                    ByVal GUID_RelationType_Auftragskonto As System.Guid,  _
                    ByVal GUID_RelationType_Gegenkonto As System.Guid,  _
                    ByVal GUID_RelationType_belonging As System.Guid,  _
                    ByVal GUID_RelationType_offers As System.Guid) As ds_BankTransactionModule.f_Sparkasse_BankTransaktionenDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(GUID_Attribute_BegZahl,System.Guid)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(GUID_Attribute_Buchungstext,System.Guid)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(GUID_Attribute_Verwendungszweck,System.Guid)
            Me.Adapter.SelectCommand.Parameters(3).Value = CType(GUID_Attribute_Info,System.Guid)
            Me.Adapter.SelectCommand.Parameters(4).Value = CType(GUID_Attribute_Zahlungsausgang,System.Guid)
            Me.Adapter.SelectCommand.Parameters(5).Value = CType(GUID_Attribute_Valutatag,System.Guid)
            Me.Adapter.SelectCommand.Parameters(6).Value = CType(GUID_Attribute_Betrag,System.Guid)
            Me.Adapter.SelectCommand.Parameters(7).Value = CType(GUID_Type_BankTransacationSparkasse,System.Guid)
            Me.Adapter.SelectCommand.Parameters(8).Value = CType(GUID_Type_Currencies,System.Guid)
            Me.Adapter.SelectCommand.Parameters(9).Value = CType(GUID_Type_AlternateCurrencyNames,System.Guid)
            Me.Adapter.SelectCommand.Parameters(10).Value = CType(GUID_Type_Kontonummer,System.Guid)
            Me.Adapter.SelectCommand.Parameters(11).Value = CType(GUID_Type_Bankleitzahl,System.Guid)
            Me.Adapter.SelectCommand.Parameters(12).Value = CType(GUID_Type_Payment,System.Guid)
            Me.Adapter.SelectCommand.Parameters(13).Value = CType(GUID_RelationType_belongsTo,System.Guid)
            Me.Adapter.SelectCommand.Parameters(14).Value = CType(GUID_RelationType_Auftragskonto,System.Guid)
            Me.Adapter.SelectCommand.Parameters(15).Value = CType(GUID_RelationType_Gegenkonto,System.Guid)
            Me.Adapter.SelectCommand.Parameters(16).Value = CType(GUID_RelationType_belonging,System.Guid)
            Me.Adapter.SelectCommand.Parameters(17).Value = CType(GUID_RelationType_offers,System.Guid)
            Dim dataTable As ds_BankTransactionModule.f_Sparkasse_BankTransaktionenDataTable = New ds_BankTransactionModule.f_Sparkasse_BankTransaktionenDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function Fill_Import( _
                    ByVal dataTable As ds_BankTransactionModule.f_Sparkasse_BankTransaktionenDataTable,  _
                    ByVal GUID_Attribute_BegZahl As Global.System.Nullable(Of Global.System.Guid),  _
                    ByVal GUID_Attribute_Buchungstext As Global.System.Nullable(Of Global.System.Guid),  _
                    ByVal GUID_Attribute_Verwendungszweck As Global.System.Nullable(Of Global.System.Guid),  _
                    ByVal GUID_Attribute_Zahlungsausgang As Global.System.Nullable(Of Global.System.Guid),  _
                    ByVal GUID_Attribute_Info As Global.System.Nullable(Of Global.System.Guid),  _
                    ByVal GUID_Attribute_Valutatag As Global.System.Nullable(Of Global.System.Guid),  _
                    ByVal GUID_Attribute_Betrag As Global.System.Nullable(Of Global.System.Guid),  _
                    ByVal GUID_Type_BankTransacationSparkasse As Global.System.Nullable(Of Global.System.Guid),  _
                    ByVal GUID_Type_Currencies As Global.System.Nullable(Of Global.System.Guid),  _
                    ByVal GUID_Type_AlternateCurrencyNames As Global.System.Nullable(Of Global.System.Guid),  _
                    ByVal GUID_Type_Kontonummer As Global.System.Nullable(Of Global.System.Guid),  _
                    ByVal GUID_Type_Bankleitzahl As Global.System.Nullable(Of Global.System.Guid),  _
                    ByVal GUID_Type_Payment As Global.System.Nullable(Of Global.System.Guid),  _
                    ByVal GUID_RelationType_belongsTo As Global.System.Nullable(Of Global.System.Guid),  _
                    ByVal GUID_RelationType_Auftragskonto As Global.System.Nullable(Of Global.System.Guid),  _
                    ByVal GUID_RelationType_Gegenkonto As Global.System.Nullable(Of Global.System.Guid),  _
                    ByVal GUID_RelationType_belonging As Global.System.Nullable(Of Global.System.Guid),  _
                    ByVal GUID_RelationType_offers As Global.System.Nullable(Of Global.System.Guid),  _
                    ByVal Info As String,  _
                    ByVal Valutatag As Global.System.Nullable(Of Date),  _
                    ByVal Zahlungsausgang As Global.System.Nullable(Of Boolean),  _
                    ByVal BegZahl As String,  _
                    ByVal Betrag As Global.System.Nullable(Of Single),  _
                    ByVal Buchungstext As String,  _
                    ByVal Verwendungszweck As String,  _
                    ByVal Currency As String,  _
                    ByVal Auftragskonto As String,  _
                    ByVal Gegenkonto As String,  _
                    ByVal BLZ_Gegenkonto As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (GUID_Attribute_BegZahl.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(GUID_Attribute_BegZahl.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (GUID_Attribute_Buchungstext.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(GUID_Attribute_Buchungstext.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (GUID_Attribute_Verwendungszweck.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(GUID_Attribute_Verwendungszweck.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (GUID_Attribute_Zahlungsausgang.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(GUID_Attribute_Zahlungsausgang.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (GUID_Attribute_Info.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(GUID_Attribute_Info.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (GUID_Attribute_Valutatag.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(GUID_Attribute_Valutatag.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (GUID_Attribute_Betrag.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(GUID_Attribute_Betrag.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (GUID_Type_BankTransacationSparkasse.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(8).Value = CType(GUID_Type_BankTransacationSparkasse.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (GUID_Type_Currencies.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(9).Value = CType(GUID_Type_Currencies.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (GUID_Type_AlternateCurrencyNames.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(10).Value = CType(GUID_Type_AlternateCurrencyNames.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (GUID_Type_Kontonummer.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(11).Value = CType(GUID_Type_Kontonummer.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (GUID_Type_Bankleitzahl.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(12).Value = CType(GUID_Type_Bankleitzahl.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (GUID_Type_Payment.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(13).Value = CType(GUID_Type_Payment.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (GUID_RelationType_belongsTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(14).Value = CType(GUID_RelationType_belongsTo.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (GUID_RelationType_Auftragskonto.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(15).Value = CType(GUID_RelationType_Auftragskonto.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (GUID_RelationType_Gegenkonto.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(16).Value = CType(GUID_RelationType_Gegenkonto.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (GUID_RelationType_belonging.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(17).Value = CType(GUID_RelationType_belonging.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (GUID_RelationType_offers.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(18).Value = CType(GUID_RelationType_offers.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Info Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(19).Value = CType(Info,String)
            End If
            If (Valutatag.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(20).Value = CType(Valutatag.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Zahlungsausgang.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(21).Value = CType(Zahlungsausgang.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (BegZahl Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(22).Value = CType(BegZahl,String)
            End If
            If (Betrag.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(23).Value = CType(Betrag.Value,Single)
            Else
                Me.Adapter.SelectCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (Buchungstext Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(24).Value = CType(Buchungstext,String)
            End If
            If (Verwendungszweck Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(25).Value = CType(Verwendungszweck,String)
            End If
            If (Currency Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(26).Value = CType(Currency,String)
            End If
            If (Auftragskonto Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(27).Value = CType(Auftragskonto,String)
            End If
            If (Gegenkonto Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(28).Value = CType(Gegenkonto,String)
            End If
            If (BLZ_Gegenkonto Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(29).Value = CType(BLZ_Gegenkonto,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetData_Import( _
                    ByVal GUID_Attribute_BegZahl As Global.System.Nullable(Of Global.System.Guid),  _
                    ByVal GUID_Attribute_Buchungstext As Global.System.Nullable(Of Global.System.Guid),  _
                    ByVal GUID_Attribute_Verwendungszweck As Global.System.Nullable(Of Global.System.Guid),  _
                    ByVal GUID_Attribute_Zahlungsausgang As Global.System.Nullable(Of Global.System.Guid),  _
                    ByVal GUID_Attribute_Info As Global.System.Nullable(Of Global.System.Guid),  _
                    ByVal GUID_Attribute_Valutatag As Global.System.Nullable(Of Global.System.Guid),  _
                    ByVal GUID_Attribute_Betrag As Global.System.Nullable(Of Global.System.Guid),  _
                    ByVal GUID_Type_BankTransacationSparkasse As Global.System.Nullable(Of Global.System.Guid),  _
                    ByVal GUID_Type_Currencies As Global.System.Nullable(Of Global.System.Guid),  _
                    ByVal GUID_Type_AlternateCurrencyNames As Global.System.Nullable(Of Global.System.Guid),  _
                    ByVal GUID_Type_Kontonummer As Global.System.Nullable(Of Global.System.Guid),  _
                    ByVal GUID_Type_Bankleitzahl As Global.System.Nullable(Of Global.System.Guid),  _
                    ByVal GUID_Type_Payment As Global.System.Nullable(Of Global.System.Guid),  _
                    ByVal GUID_RelationType_belongsTo As Global.System.Nullable(Of Global.System.Guid),  _
                    ByVal GUID_RelationType_Auftragskonto As Global.System.Nullable(Of Global.System.Guid),  _
                    ByVal GUID_RelationType_Gegenkonto As Global.System.Nullable(Of Global.System.Guid),  _
                    ByVal GUID_RelationType_belonging As Global.System.Nullable(Of Global.System.Guid),  _
                    ByVal GUID_RelationType_offers As Global.System.Nullable(Of Global.System.Guid),  _
                    ByVal Info As String,  _
                    ByVal Valutatag As Global.System.Nullable(Of Date),  _
                    ByVal Zahlungsausgang As Global.System.Nullable(Of Boolean),  _
                    ByVal BegZahl As String,  _
                    ByVal Betrag As Global.System.Nullable(Of Single),  _
                    ByVal Buchungstext As String,  _
                    ByVal Verwendungszweck As String,  _
                    ByVal Currency As String,  _
                    ByVal Auftragskonto As String,  _
                    ByVal Gegenkonto As String,  _
                    ByVal BLZ_Gegenkonto As String) As ds_BankTransactionModule.f_Sparkasse_BankTransaktionenDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (GUID_Attribute_BegZahl.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(GUID_Attribute_BegZahl.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (GUID_Attribute_Buchungstext.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(GUID_Attribute_Buchungstext.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (GUID_Attribute_Verwendungszweck.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(GUID_Attribute_Verwendungszweck.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (GUID_Attribute_Zahlungsausgang.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(GUID_Attribute_Zahlungsausgang.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (GUID_Attribute_Info.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(GUID_Attribute_Info.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (GUID_Attribute_Valutatag.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(GUID_Attribute_Valutatag.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (GUID_Attribute_Betrag.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(GUID_Attribute_Betrag.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (GUID_Type_BankTransacationSparkasse.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(8).Value = CType(GUID_Type_BankTransacationSparkasse.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (GUID_Type_Currencies.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(9).Value = CType(GUID_Type_Currencies.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (GUID_Type_AlternateCurrencyNames.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(10).Value = CType(GUID_Type_AlternateCurrencyNames.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (GUID_Type_Kontonummer.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(11).Value = CType(GUID_Type_Kontonummer.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (GUID_Type_Bankleitzahl.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(12).Value = CType(GUID_Type_Bankleitzahl.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (GUID_Type_Payment.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(13).Value = CType(GUID_Type_Payment.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (GUID_RelationType_belongsTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(14).Value = CType(GUID_RelationType_belongsTo.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (GUID_RelationType_Auftragskonto.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(15).Value = CType(GUID_RelationType_Auftragskonto.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (GUID_RelationType_Gegenkonto.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(16).Value = CType(GUID_RelationType_Gegenkonto.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (GUID_RelationType_belonging.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(17).Value = CType(GUID_RelationType_belonging.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (GUID_RelationType_offers.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(18).Value = CType(GUID_RelationType_offers.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Info Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(19).Value = CType(Info,String)
            End If
            If (Valutatag.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(20).Value = CType(Valutatag.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Zahlungsausgang.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(21).Value = CType(Zahlungsausgang.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (BegZahl Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(22).Value = CType(BegZahl,String)
            End If
            If (Betrag.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(23).Value = CType(Betrag.Value,Single)
            Else
                Me.Adapter.SelectCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (Buchungstext Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(24).Value = CType(Buchungstext,String)
            End If
            If (Verwendungszweck Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(25).Value = CType(Verwendungszweck,String)
            End If
            If (Currency Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(26).Value = CType(Currency,String)
            End If
            If (Auftragskonto Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(27).Value = CType(Auftragskonto,String)
            End If
            If (Gegenkonto Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(28).Value = CType(Gegenkonto,String)
            End If
            If (BLZ_Gegenkonto Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(29).Value = CType(BLZ_Gegenkonto,String)
            End If
            Dim dataTable As ds_BankTransactionModule.f_Sparkasse_BankTransaktionenDataTable = New ds_BankTransactionModule.f_Sparkasse_BankTransaktionenDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function Fill_With_Archive( _
                    ByVal dataTable As ds_BankTransactionModule.f_Sparkasse_BankTransaktionenDataTable,  _
                    ByVal GUID_Attribute_BegZahl As System.Guid,  _
                    ByVal GUID_Attribute_Buchungstext As System.Guid,  _
                    ByVal GUID_Attribute_Verwendungszweck As System.Guid,  _
                    ByVal GUID_Attribute_Info As System.Guid,  _
                    ByVal GUID_Attribute_Zahlungsausgang As System.Guid,  _
                    ByVal GUID_Attribute_Valutatag As System.Guid,  _
                    ByVal GUID_Attribute_Betrag As System.Guid,  _
                    ByVal GUID_Type_BankTransacationSparkasse As System.Guid,  _
                    ByVal GUID_Type_BankTransacationSparkasse_Archive As System.Guid,  _
                    ByVal GUID_Type_Currencies As System.Guid,  _
                    ByVal GUID_Type_AlternateCurrencyNames As System.Guid,  _
                    ByVal GUID_Type_Kontonummer As System.Guid,  _
                    ByVal GUID_Type_Bankleitzahl As System.Guid,  _
                    ByVal GUID_Type_Payment As System.Guid,  _
                    ByVal GUID_RelationType_belongsTo As System.Guid,  _
                    ByVal GUID_RelationType_Auftragskonto As System.Guid,  _
                    ByVal GUID_RelationType_Gegenkonto As System.Guid,  _
                    ByVal GUID_RelationType_belonging As System.Guid,  _
                    ByVal GUID_RelationType_offers As System.Guid) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(GUID_Attribute_BegZahl,System.Guid)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(GUID_Attribute_Buchungstext,System.Guid)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(GUID_Attribute_Verwendungszweck,System.Guid)
            Me.Adapter.SelectCommand.Parameters(3).Value = CType(GUID_Attribute_Info,System.Guid)
            Me.Adapter.SelectCommand.Parameters(4).Value = CType(GUID_Attribute_Zahlungsausgang,System.Guid)
            Me.Adapter.SelectCommand.Parameters(5).Value = CType(GUID_Attribute_Valutatag,System.Guid)
            Me.Adapter.SelectCommand.Parameters(6).Value = CType(GUID_Attribute_Betrag,System.Guid)
            Me.Adapter.SelectCommand.Parameters(7).Value = CType(GUID_Type_BankTransacationSparkasse,System.Guid)
            Me.Adapter.SelectCommand.Parameters(8).Value = CType(GUID_Type_BankTransacationSparkasse_Archive,System.Guid)
            Me.Adapter.SelectCommand.Parameters(9).Value = CType(GUID_Type_Currencies,System.Guid)
            Me.Adapter.SelectCommand.Parameters(10).Value = CType(GUID_Type_AlternateCurrencyNames,System.Guid)
            Me.Adapter.SelectCommand.Parameters(11).Value = CType(GUID_Type_Kontonummer,System.Guid)
            Me.Adapter.SelectCommand.Parameters(12).Value = CType(GUID_Type_Bankleitzahl,System.Guid)
            Me.Adapter.SelectCommand.Parameters(13).Value = CType(GUID_Type_Payment,System.Guid)
            Me.Adapter.SelectCommand.Parameters(14).Value = CType(GUID_RelationType_belongsTo,System.Guid)
            Me.Adapter.SelectCommand.Parameters(15).Value = CType(GUID_RelationType_Auftragskonto,System.Guid)
            Me.Adapter.SelectCommand.Parameters(16).Value = CType(GUID_RelationType_Gegenkonto,System.Guid)
            Me.Adapter.SelectCommand.Parameters(17).Value = CType(GUID_RelationType_belonging,System.Guid)
            Me.Adapter.SelectCommand.Parameters(18).Value = CType(GUID_RelationType_offers,System.Guid)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetData_With_Archive( _
                    ByVal GUID_Attribute_BegZahl As System.Guid,  _
                    ByVal GUID_Attribute_Buchungstext As System.Guid,  _
                    ByVal GUID_Attribute_Verwendungszweck As System.Guid,  _
                    ByVal GUID_Attribute_Info As System.Guid,  _
                    ByVal GUID_Attribute_Zahlungsausgang As System.Guid,  _
                    ByVal GUID_Attribute_Valutatag As System.Guid,  _
                    ByVal GUID_Attribute_Betrag As System.Guid,  _
                    ByVal GUID_Type_BankTransacationSparkasse As System.Guid,  _
                    ByVal GUID_Type_BankTransacationSparkasse_Archive As System.Guid,  _
                    ByVal GUID_Type_Currencies As System.Guid,  _
                    ByVal GUID_Type_AlternateCurrencyNames As System.Guid,  _
                    ByVal GUID_Type_Kontonummer As System.Guid,  _
                    ByVal GUID_Type_Bankleitzahl As System.Guid,  _
                    ByVal GUID_Type_Payment As System.Guid,  _
                    ByVal GUID_RelationType_belongsTo As System.Guid,  _
                    ByVal GUID_RelationType_Auftragskonto As System.Guid,  _
                    ByVal GUID_RelationType_Gegenkonto As System.Guid,  _
                    ByVal GUID_RelationType_belonging As System.Guid,  _
                    ByVal GUID_RelationType_offers As System.Guid) As ds_BankTransactionModule.f_Sparkasse_BankTransaktionenDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(GUID_Attribute_BegZahl,System.Guid)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(GUID_Attribute_Buchungstext,System.Guid)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(GUID_Attribute_Verwendungszweck,System.Guid)
            Me.Adapter.SelectCommand.Parameters(3).Value = CType(GUID_Attribute_Info,System.Guid)
            Me.Adapter.SelectCommand.Parameters(4).Value = CType(GUID_Attribute_Zahlungsausgang,System.Guid)
            Me.Adapter.SelectCommand.Parameters(5).Value = CType(GUID_Attribute_Valutatag,System.Guid)
            Me.Adapter.SelectCommand.Parameters(6).Value = CType(GUID_Attribute_Betrag,System.Guid)
            Me.Adapter.SelectCommand.Parameters(7).Value = CType(GUID_Type_BankTransacationSparkasse,System.Guid)
            Me.Adapter.SelectCommand.Parameters(8).Value = CType(GUID_Type_BankTransacationSparkasse_Archive,System.Guid)
            Me.Adapter.SelectCommand.Parameters(9).Value = CType(GUID_Type_Currencies,System.Guid)
            Me.Adapter.SelectCommand.Parameters(10).Value = CType(GUID_Type_AlternateCurrencyNames,System.Guid)
            Me.Adapter.SelectCommand.Parameters(11).Value = CType(GUID_Type_Kontonummer,System.Guid)
            Me.Adapter.SelectCommand.Parameters(12).Value = CType(GUID_Type_Bankleitzahl,System.Guid)
            Me.Adapter.SelectCommand.Parameters(13).Value = CType(GUID_Type_Payment,System.Guid)
            Me.Adapter.SelectCommand.Parameters(14).Value = CType(GUID_RelationType_belongsTo,System.Guid)
            Me.Adapter.SelectCommand.Parameters(15).Value = CType(GUID_RelationType_Auftragskonto,System.Guid)
            Me.Adapter.SelectCommand.Parameters(16).Value = CType(GUID_RelationType_Gegenkonto,System.Guid)
            Me.Adapter.SelectCommand.Parameters(17).Value = CType(GUID_RelationType_belonging,System.Guid)
            Me.Adapter.SelectCommand.Parameters(18).Value = CType(GUID_RelationType_offers,System.Guid)
            Dim dataTable As ds_BankTransactionModule.f_Sparkasse_BankTransaktionenDataTable = New ds_BankTransactionModule.f_Sparkasse_BankTransaktionenDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class p_Currency_By_NameTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "p_Currency_By_Name"
            tableMapping.ColumnMappings.Add("GUID_Currencies", "GUID_Currencies")
            tableMapping.ColumnMappings.Add("Name_Currencies", "Name_Currencies")
            tableMapping.ColumnMappings.Add("GUID_Type_Currencies", "GUID_Type_Currencies")
            tableMapping.ColumnMappings.Add("GUID_Alternate_Currency_Name", "GUID_Alternate_Currency_Name")
            tableMapping.ColumnMappings.Add("Name_Alternate_Currency_Name", "Name_Alternate_Currency_Name")
            tableMapping.ColumnMappings.Add("GUID_Type_Alternate_Currency_Name", "GUID_Type_Alternate_Currency_Name")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Bank_Transaction_Module.My.MySettings.Default.sem_db_system_BankTransaction_ModuleConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.p_Currency_By_Name"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GUID_Type_Currency", Global.System.Data.SqlDbType.UniqueIdentifier, 16, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GUID_Type_AlternateName", Global.System.Data.SqlDbType.UniqueIdentifier, 16, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GUID_RelationType_offers", Global.System.Data.SqlDbType.UniqueIdentifier, 16, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Currency", Global.System.Data.SqlDbType.VarChar, 255, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ds_BankTransactionModule.p_Currency_By_NameDataTable, ByVal GUID_Type_Currency As Global.System.Nullable(Of Global.System.Guid), ByVal GUID_Type_AlternateName As Global.System.Nullable(Of Global.System.Guid), ByVal GUID_RelationType_offers As Global.System.Nullable(Of Global.System.Guid), ByVal Currency As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (GUID_Type_Currency.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(GUID_Type_Currency.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (GUID_Type_AlternateName.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(GUID_Type_AlternateName.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (GUID_RelationType_offers.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(GUID_RelationType_offers.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Currency Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(Currency,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal GUID_Type_Currency As Global.System.Nullable(Of Global.System.Guid), ByVal GUID_Type_AlternateName As Global.System.Nullable(Of Global.System.Guid), ByVal GUID_RelationType_offers As Global.System.Nullable(Of Global.System.Guid), ByVal Currency As String) As ds_BankTransactionModule.p_Currency_By_NameDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (GUID_Type_Currency.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(GUID_Type_Currency.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (GUID_Type_AlternateName.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(GUID_Type_AlternateName.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (GUID_RelationType_offers.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(GUID_RelationType_offers.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Currency Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(Currency,String)
            End If
            Dim dataTable As ds_BankTransactionModule.p_Currency_By_NameDataTable = New ds_BankTransactionModule.p_Currency_By_NameDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class p_Konto_By_KTO_And_BLZTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "p_Konto_By_KTO_And_BLZ"
            tableMapping.ColumnMappings.Add("GUID_Kontonummer", "GUID_Kontonummer")
            tableMapping.ColumnMappings.Add("Name_Kontonummer", "Name_Kontonummer")
            tableMapping.ColumnMappings.Add("GUID_Type_Kontonummer", "GUID_Type_Kontonummer")
            tableMapping.ColumnMappings.Add("GUID_Bankleitzahl", "GUID_Bankleitzahl")
            tableMapping.ColumnMappings.Add("Name_Bankleitzahl", "Name_Bankleitzahl")
            tableMapping.ColumnMappings.Add("GUID_Type_Bankleitzahl", "GUID_Type_Bankleitzahl")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Bank_Transaction_Module.My.MySettings.Default.sem_db_system_BankTransaction_ModuleConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.p_Konto_By_KTO_And_BLZ"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GUID_Type_Kontonummer", Global.System.Data.SqlDbType.UniqueIdentifier, 16, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GUID_Type_Bankleitzahl", Global.System.Data.SqlDbType.UniqueIdentifier, 16, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GUID_RelationType_belongsTo", Global.System.Data.SqlDbType.UniqueIdentifier, 16, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Name_Kontonummer", Global.System.Data.SqlDbType.VarChar, 255, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Name_Bankleitzahl", Global.System.Data.SqlDbType.VarChar, 255, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ds_BankTransactionModule.p_Konto_By_KTO_And_BLZDataTable, ByVal GUID_Type_Kontonummer As Global.System.Nullable(Of Global.System.Guid), ByVal GUID_Type_Bankleitzahl As Global.System.Nullable(Of Global.System.Guid), ByVal GUID_RelationType_belongsTo As Global.System.Nullable(Of Global.System.Guid), ByVal Name_Kontonummer As String, ByVal Name_Bankleitzahl As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (GUID_Type_Kontonummer.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(GUID_Type_Kontonummer.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (GUID_Type_Bankleitzahl.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(GUID_Type_Bankleitzahl.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (GUID_RelationType_belongsTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(GUID_RelationType_belongsTo.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Name_Kontonummer Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(Name_Kontonummer,String)
            End If
            If (Name_Bankleitzahl Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(Name_Bankleitzahl,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal GUID_Type_Kontonummer As Global.System.Nullable(Of Global.System.Guid), ByVal GUID_Type_Bankleitzahl As Global.System.Nullable(Of Global.System.Guid), ByVal GUID_RelationType_belongsTo As Global.System.Nullable(Of Global.System.Guid), ByVal Name_Kontonummer As String, ByVal Name_Bankleitzahl As String) As ds_BankTransactionModule.p_Konto_By_KTO_And_BLZDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (GUID_Type_Kontonummer.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(GUID_Type_Kontonummer.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (GUID_Type_Bankleitzahl.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(GUID_Type_Bankleitzahl.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (GUID_RelationType_belongsTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(GUID_RelationType_belongsTo.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Name_Kontonummer Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(Name_Kontonummer,String)
            End If
            If (Name_Bankleitzahl Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(Name_Bankleitzahl,String)
            End If
            Dim dataTable As ds_BankTransactionModule.p_Konto_By_KTO_And_BLZDataTable = New ds_BankTransactionModule.p_Konto_By_KTO_And_BLZDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class p_ImportSettings_of_PartnerTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "p_ImportSettings_of_Partner"
            tableMapping.ColumnMappings.Add("GUID_Kontodaten", "GUID_Kontodaten")
            tableMapping.ColumnMappings.Add("Name_Kontodaten", "Name_Kontodaten")
            tableMapping.ColumnMappings.Add("GUID_Type_Kontodaten", "GUID_Type_Kontodaten")
            tableMapping.ColumnMappings.Add("GUID_Bankkonto", "GUID_Bankkonto")
            tableMapping.ColumnMappings.Add("Name_Bankkonto", "Name_Bankkonto")
            tableMapping.ColumnMappings.Add("GUID_Type_Bankkonto", "GUID_Type_Bankkonto")
            tableMapping.ColumnMappings.Add("GUID_Bankinstitut", "GUID_Bankinstitut")
            tableMapping.ColumnMappings.Add("Name_Bankinstitut", "Name_Bankinstitut")
            tableMapping.ColumnMappings.Add("GUID_Type_Bankinstitut", "GUID_Type_Bankinstitut")
            tableMapping.ColumnMappings.Add("GUID_Type", "GUID_Type")
            tableMapping.ColumnMappings.Add("Name_Type", "Name_Type")
            tableMapping.ColumnMappings.Add("GUID_Import_Settings", "GUID_Import_Settings")
            tableMapping.ColumnMappings.Add("Name_Import_Settings", "Name_Import_Settings")
            tableMapping.ColumnMappings.Add("GUID_Type_Import_Settings", "GUID_Type_Import_Settings")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Bank_Transaction_Module.My.MySettings.Default.sem_db_system_BankTransaction_ModuleConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.p_ImportSettings_of_Partner"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GUID_Type_Kontodaten", Global.System.Data.SqlDbType.UniqueIdentifier, 16, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GUID_Type_Bankkonto", Global.System.Data.SqlDbType.UniqueIdentifier, 16, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GUID_Type_Bankinstitut", Global.System.Data.SqlDbType.UniqueIdentifier, 16, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GUID_Type_ImportSettings", Global.System.Data.SqlDbType.UniqueIdentifier, 16, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GUID_RelationType_belongsTo", Global.System.Data.SqlDbType.UniqueIdentifier, 16, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GUID_RelationType_provides", Global.System.Data.SqlDbType.UniqueIdentifier, 16, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GUID_RelationType_belonging", Global.System.Data.SqlDbType.UniqueIdentifier, 16, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GUID_RelationType_belongingBanks", Global.System.Data.SqlDbType.UniqueIdentifier, 16, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GUID_Partner", Global.System.Data.SqlDbType.UniqueIdentifier, 16, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ds_BankTransactionModule.p_ImportSettings_of_PartnerDataTable, ByVal GUID_Type_Kontodaten As Global.System.Nullable(Of Global.System.Guid), ByVal GUID_Type_Bankkonto As Global.System.Nullable(Of Global.System.Guid), ByVal GUID_Type_Bankinstitut As Global.System.Nullable(Of Global.System.Guid), ByVal GUID_Type_ImportSettings As Global.System.Nullable(Of Global.System.Guid), ByVal GUID_RelationType_belongsTo As Global.System.Nullable(Of Global.System.Guid), ByVal GUID_RelationType_provides As Global.System.Nullable(Of Global.System.Guid), ByVal GUID_RelationType_belonging As Global.System.Nullable(Of Global.System.Guid), ByVal GUID_RelationType_belongingBanks As Global.System.Nullable(Of Global.System.Guid), ByVal GUID_Partner As Global.System.Nullable(Of Global.System.Guid)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (GUID_Type_Kontodaten.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(GUID_Type_Kontodaten.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (GUID_Type_Bankkonto.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(GUID_Type_Bankkonto.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (GUID_Type_Bankinstitut.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(GUID_Type_Bankinstitut.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (GUID_Type_ImportSettings.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(GUID_Type_ImportSettings.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (GUID_RelationType_belongsTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(GUID_RelationType_belongsTo.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (GUID_RelationType_provides.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(GUID_RelationType_provides.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (GUID_RelationType_belonging.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(GUID_RelationType_belonging.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (GUID_RelationType_belongingBanks.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(8).Value = CType(GUID_RelationType_belongingBanks.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (GUID_Partner.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(9).Value = CType(GUID_Partner.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal GUID_Type_Kontodaten As Global.System.Nullable(Of Global.System.Guid), ByVal GUID_Type_Bankkonto As Global.System.Nullable(Of Global.System.Guid), ByVal GUID_Type_Bankinstitut As Global.System.Nullable(Of Global.System.Guid), ByVal GUID_Type_ImportSettings As Global.System.Nullable(Of Global.System.Guid), ByVal GUID_RelationType_belongsTo As Global.System.Nullable(Of Global.System.Guid), ByVal GUID_RelationType_provides As Global.System.Nullable(Of Global.System.Guid), ByVal GUID_RelationType_belonging As Global.System.Nullable(Of Global.System.Guid), ByVal GUID_RelationType_belongingBanks As Global.System.Nullable(Of Global.System.Guid), ByVal GUID_Partner As Global.System.Nullable(Of Global.System.Guid)) As ds_BankTransactionModule.p_ImportSettings_of_PartnerDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (GUID_Type_Kontodaten.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(GUID_Type_Kontodaten.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (GUID_Type_Bankkonto.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(GUID_Type_Bankkonto.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (GUID_Type_Bankinstitut.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(GUID_Type_Bankinstitut.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (GUID_Type_ImportSettings.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(GUID_Type_ImportSettings.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (GUID_RelationType_belongsTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(GUID_RelationType_belongsTo.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (GUID_RelationType_provides.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(GUID_RelationType_provides.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (GUID_RelationType_belonging.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(GUID_RelationType_belonging.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (GUID_RelationType_belongingBanks.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(8).Value = CType(GUID_RelationType_belongingBanks.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (GUID_Partner.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(9).Value = CType(GUID_Partner.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As ds_BankTransactionModule.p_ImportSettings_of_PartnerDataTable = New ds_BankTransactionModule.p_ImportSettings_of_PartnerDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As ds_BankTransactionModule, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateInsertedRows(ByVal dataSet As ds_BankTransactionModule, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateDeletedRows(ByVal dataSet As ds_BankTransactionModule, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function UpdateAll(ByVal dataSet As ds_BankTransactionModule) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager enthält keine Verbindungsinformationen. Legen Sie jede TableA"& _ 
                        "dapterManager TableAdapter-Eigenschaft auf eine gültige TableAdapter-Instanz fes"& _ 
                        "t.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("Die Transaktion kann nicht gestartet werden. Die aktuelle Datenverbindung unterst"& _ 
                        "ützt keine Transaktionen, oder der aktuelle Zustand lässt den Start der Transakt"& _ 
                        "ion nicht zu.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)()
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)()
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet()
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Private Function GetRoot(ByVal row As Global.System.Data.DataRow, ByRef distance As Integer) As Global.System.Data.DataRow
                Global.System.Diagnostics.Debug.Assert((Not (row) Is Nothing))
                Dim root As Global.System.Data.DataRow = row
                distance = 0

                Dim traversedRows As Global.System.Collections.Generic.IDictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow) = New Global.System.Collections.Generic.Dictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow)()
                traversedRows(row) = row

                Dim parent As Global.System.Data.DataRow = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (parent) Is Nothing)  _
                            AndAlso (traversedRows.ContainsKey(parent) = false))
                    distance = (distance + 1)
                    root = parent
                    traversedRows(parent) = parent
                    parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop

                If (distance = 0) Then
                    traversedRows.Clear
                    traversedRows(row) = row
                    parent = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Do While ((Not (parent) Is Nothing)  _
                                AndAlso (traversedRows.ContainsKey(parent) = false))
                        distance = (distance + 1)
                        root = parent
                        traversedRows(parent) = parent
                        parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If

                Return root
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                Dim distance1 As Integer = 0
                Dim root1 As Global.System.Data.DataRow = Me.GetRoot(row1, distance1)

                Dim distance2 As Integer = 0
                Dim root2 As Global.System.Data.DataRow = Me.GetRoot(row2, distance2)

                If Object.ReferenceEquals(root1, root2) Then
                    Return (Me._childFirst * distance1.CompareTo(distance2))
                Else
                    Global.System.Diagnostics.Debug.Assert(((Not (root1.Table) Is Nothing)  _
                                    AndAlso (Not (root2.Table) Is Nothing)))
                    If (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2)) Then
                        Return -1
                    Else
                        Return 1
                    End If
                End If
            End Function
        End Class
    End Class
End Namespace
